<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go语法-channel机制探寻</title>
    <link href="/2025/08/09/Golang/2025-08-09-Go%E8%AF%AD%E6%B3%95-channel%E6%9C%BA%E5%88%B6%E6%8E%A2%E5%AF%BB/"/>
    <url>/2025/08/09/Golang/2025-08-09-Go%E8%AF%AD%E6%B3%95-channel%E6%9C%BA%E5%88%B6%E6%8E%A2%E5%AF%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对于进程间通信与资源交换这一问题，Go 使用了 channel 这一类型安全的消息队列来处理。chan 控制 goroutines 交互的能力从而创建了 Go 同步机制。同时，可以通过指定容量大小来创建无缓冲通道与缓冲通道。<br>下面，将对这两种通道进行介绍，并给出常见的使用模式</p></blockquote><h3><span id="unbuffered-channels-wu-huan-chong-tong-dao">Unbuffered Channels （无缓冲通道）</span></h3><p>无缓冲 chan 没有容量，因此在进行任何交换前都需要两个 goroutine <strong>同时</strong>准备好。若非如此，可能会出现以下两种情况：</p><ul><li><p>当 goroutine 试图将一个资源发送到一个无缓冲的通道，同时没有 goroutine 等待接收该资源时：该通道将锁住发送 goroutine 并使其等待，直到有一个 goroutine 对通道进行接收操作。</p></li><li><p>当 goroutine 尝试从无缓冲通道接收，但此时没有一个 goroutine 等待发送资源时：该通道将锁住接收 goroutine 并使其等待，知道有一个 goroutine 准备将一个资源发送到通道。</p></li></ul><p>根据上面的两种情况可以看出，发送和接收的 goroutine 中的任意一方准备好时，都必须等待对方也准备好才能进行资源的交换。因此，无缓冲通道的本质是<strong>保证双方的同步</strong>。</p><p>还有一点值得注意：对于无缓冲通道，发送方将持续阻塞直到接收方从通道中接收到了传入的值。这保证了接收一定先于发送发生，由此可以 100 % 保证传入的值被收到，但代价是无法预测阻塞（延迟）的时间。</p><h3><span id="buffered-channels-huan-chong-tong-dao">Buffered Channels（缓冲通道）</span></h3><p>与无缓冲通道相比，缓冲通道具有容量，因此情况也会有所不同：</p><ul><li><p>当 goroutine 试图将资源发送到缓冲通道，且该通道已满时：该通道将锁住 goroutine 并使其等待，直到缓冲区重新有可用空间，（有 goroutine 消费了通道中已有的资源）此时发送可立即进行，之前被锁住的 goroutine 可以继续向通道发送资源，直到通道空间再次装满。</p></li><li><p>当 goroutine 尝试从缓冲通道接收数据，而通道为空时：该通道将锁住 goroutine 并使其等待，直到有资源被发送进这个通道。</p></li></ul><p>可以看出，在 chan 创建过程中定义的缓冲区大小可能会极大的影响程序性能。此时通常需要使用 Benchmark 对不同大小的缓冲区做一个基准测试，来选取大小合适的缓冲区（并不是说 buffer 越大，程序的性能一定越好，这视发送与接收方的情况而定）。</p><p>此外，与无缓冲通道相比，缓冲通道的发送先于接收发生。这样做的好处是延迟更小，而代价是不能保证数据到达，可以这样说：越大的 buffer，越小的保障到达。</p><h3><span id="shi-yong-tong-dao-de-chang-jian-mo-shi">使用通道的常见模式</span></h3><h4><span id="1-timing-out">1. Timing out</span></h4><p>使用 channels 做一个超时控制，官方案例如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang">timeout := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>timeout &lt;- <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>我们希望从管道 ch 中接收数据，但我们也希望最多等待1秒钟。为此，我们应该在将数据发送到 ch 前先创建一个信号的管道，并且运行一个 goroutine 进行1秒钟的休眠。</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ch:<br><span class="hljs-comment">// a read from ch has occurred</span><br><span class="hljs-keyword">case</span> &lt;-timeout:<br><span class="hljs-comment">// the read from ch has time out</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>接下来我们可以使用 select 语句来接收来自 ch 或者 timeout 的数据。如果在1秒后没有数据到达 ch，则 case timeout 将被选择并且认为从 ch 读取数据的操作失败了。<br>可以看到，timeout 是一个缓冲区大小为1的管道，它允许超时的 goroutine 向这个管道发送信息并终止。（这个 goroutine）</p></blockquote><p>参考资料：<a href="https://go.dev/blog/concurrency-timeouts">https://go.dev/blog/concurrency-timeouts</a></p><h4><span id="2-moving-on">2. Moving on</span></h4><p>这个案例的背景是同时向一个数据库的多个分表进行并发查询，而程序只需要其中任一查询结果，因此应该接收最先到达的结果。</p><p>可以看到，函数 Query 接收一个数据库连接的切片和要查询的字符串。然后它并行的对每一个数据库进行查询并返回接收到的最先响应的结果。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Query</span><span class="hljs-params">(conns []Conn, query <span class="hljs-type">string</span>)</span></span> Result &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Result)<br><span class="hljs-keyword">for</span> _, conn := <span class="hljs-keyword">range</span> conns &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c Conn)</span></span>&#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> ch &lt;- c.DoQuery(query):<br>defult:<br>&#125;<br>&#125;(conn)<br>&#125;<br><span class="hljs-keyword">return</span> &lt;-ch<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当第一个查询结果被发送进 ch 后，其他的查询将会通过 select 语句的 default 退出。</p></blockquote><p>参考资料：<a href="https://go.dev/blog/concurrency-timeouts">https://go.dev/blog/concurrency-timeouts</a></p><h4><span id="3-pipeline">3. Pipeline</span></h4><p>流水线模式最经典的例子应该就是素数筛了，代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golang"><br></code></pre></td></tr></table></figure><h4><span id="4-fan-out-fan-in">4. Fan-out, Fan-in</span></h4><h4><span id="5-cancellation">5. Cancellation</span></h4><h4><span id="6-contex">6. Contex</span></h4><h3><span id="she-ji-yuan-ze">设计原则</span></h3><ul><li><p>如果任意一个向通道的发送可以导致发送 goroutine 被阻塞，你需要考虑：</p><ul><li>不能使用缓冲数大于1的通道（如果需要，你必须能说明这样做的理由）</li><li>必须知道当发送 goroutine 被阻塞时会发生什么（是否需要处理 &#x2F; 怎么处理 &#x2F; 是否符合预期）</li></ul></li><li><p>如果任意一个向通道的发送不会导致发送 goroutine 被阻塞，你需要考虑：</p><ul><li>你为每一个发送设有额外的缓冲区（比如 Fan Out 模式）</li><li>你能对处于最大容量的缓冲区进行相应的处理（是将数据丢弃还是继续等待）</li></ul></li><li><p>对于缓冲来说，少即是多（Less is more）：</p><ul><li>不要将缓冲的大小与性能挂钩</li><li>缓冲可以减少 goroutine 唤醒的成本</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pytest-测试框架</title>
    <link href="/2025/08/03/Python/2025-08-01-pytest-%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2025/08/03/Python/2025-08-01-pytest-%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>pytest 是 Python 领域使用最广泛、功能最丰富的 <strong>第三方</strong> 单元测试框架（Unit Test Framework）。它秉承“让测试变得更简单”的理念，语法简洁、插件生态庞大，几乎已经成为 Python 事实上的测试标准。</p></blockquote><h2><span id="yi-an-zhuang">一、安装</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pytest<br></code></pre></td></tr></table></figure><h2><span id="er-zui-xiao-ke-yun-xing-shi-li">二、最小可运行示例</span></h2><p>这里以博主的demo作为例子</p><h3><span id="1-jian-li-mu-lu-jie-gou">1. 建立目录结构</span></h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix">demo<span class="hljs-symbol">/</span><br>├── src<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 核心领域模型</span><br>│   └── entities.py            <span class="hljs-comment"># Chemical/Hazard等核心类定义</span><br>│<br>└── tests<span class="hljs-symbol">/</span>                     <span class="hljs-comment"># 测试套件</span><br>    └── test_entities.py.      <span class="hljs-comment"># entities.py测试代码</span><br></code></pre></td></tr></table></figure><h3><span id="2-bei-ce-dai-ma-src-entities-py">2. 被测代码 <code>src/entities.py</code></span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel, validator<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;化学品核心实体&quot;&quot;&quot;</span>  <br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span>  <br>    name: <span class="hljs-built_in">str</span><br>    en_name: <span class="hljs-built_in">str</span><br>    cas: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br>    un: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>  <br>  <br><span class="hljs-meta">    @validator(<span class="hljs-params"><span class="hljs-string">&#x27;cas&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_cas</span>(<span class="hljs-params">cls, v</span>):<br>        <span class="hljs-keyword">if</span> v <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^\d&#123;2,7&#125;-\d&#123;2&#125;-\d$&#x27;</span>, v):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Invalid CAS number format&quot;</span>)<br>        <span class="hljs-keyword">return</span> v <br></code></pre></td></tr></table></figure><h3><span id="3-ce-shi-dai-ma-tests-test-entities-py">3. 测试代码 <code>tests/test_entities.py</code></span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> ValidationError<br><span class="hljs-keyword">from</span> core.entities <span class="hljs-keyword">import</span> Chemical<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestChemical</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_valid_chemical</span>(<span class="hljs-params">self</span>):  <br>        chem = Chemical(<br>            <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CHEM001&quot;</span>,<br>            name=<span class="hljs-string">&quot;水&quot;</span>,<br>            en_name=<span class="hljs-string">&quot;Water&quot;</span>,<br>            cas=<span class="hljs-string">&quot;7732-18-5&quot;</span>,  <span class="hljs-comment"># 有效CAS</span><br>        )<br>        <span class="hljs-keyword">assert</span> chem.cas == <span class="hljs-string">&quot;7732-18-5&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_cas_validation</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-keyword">with</span> pytest.raises(ValidationError):<br>            Chemical(<br>                <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CHEM002&quot;</span>,<br>                name=<span class="hljs-string">&quot;测试&quot;</span>,<br>                en_name=<span class="hljs-string">&quot;test&quot;</span>,<br>                cas=<span class="hljs-string">&quot;abc-de-f&quot;</span>,  <span class="hljs-comment"># 无效格式</span><br>            )<br></code></pre></td></tr></table></figure><h3><span id="4-yun-xing-ce-shi">4. 运行测试</span></h3><p>在项目根目录执行：<code>pytest</code>, pytest 会递归查找以 <code>test_*.py</code> 或 <code>*_test.py</code> 命名的文件，执行其中以 <code>test_</code> 开头的函数&#x2F;类&#x2F;方法。</p><h2><span id="san-he-xin-te-xing-su-lan">三、核心特性速览</span></h2><table><thead><tr><th>功能</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><strong>断言语句</strong></td><td>仅使用原生 <code>assert</code></td><td><code>assert chem.cas == &quot;7732-18-5&quot;</code></td></tr><tr><td><strong>自动发现</strong></td><td>默认规则：文件&#x2F;函数&#x2F;类以 <code>test_</code> 开头</td><td>无需手动注册</td></tr><tr><td><strong>夹具（fixture）</strong></td><td>测试前置&#x2F;后置逻辑复用</td><td><code>@pytest.fixture</code></td></tr><tr><td><strong>参数化</strong></td><td>一条测试跑多组输入</td><td><code>@pytest.mark.parametrize</code></td></tr><tr><td><strong>标记（mark）</strong></td><td>给测试打标签，选择性运行</td><td><code>@pytest.mark.slow</code></td></tr><tr><td><strong>插件体系</strong></td><td>1000+ 插件，如 <code>pytest-cov</code></td><td><code>pip install pytest-cov</code></td></tr></tbody></table><h2><span id="si-fixture-ke-fu-yong-de-ce-shi-zi-yuan">四、fixture：可复用的测试资源</span></h2><p>在 pytest 里，<strong>fixture</strong> 就是“测试用的资源工厂”。<br>它负责：</p><ol><li><p><strong>创建</strong>（setup）—— 测试前把环境、数据、连接准备好；</p></li><li><p><strong>提供</strong>（yield &#x2F; return）—— 把资源交给测试函数；</p></li><li><p><strong>清理</strong>（teardown）—— 测试后自动释放、回滚、断开。</p></li></ol><p>写一次，到处用；pytest 会自动按需调度。</p><hr><h3><span id="1-zui-xiao-fixture-mo-ban">1. 最小 fixture 模板</span></h3><p>定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample_list</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;返回一个可复用的列表，测试后自动清空。&quot;&quot;&quot;</span><br>    data = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    <span class="hljs-keyword">yield</span> data           <span class="hljs-comment"># 把资源交给测试用例</span><br>    data.clear()         <span class="hljs-comment"># 测试结束后执行</span><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_len</span>(<span class="hljs-params">sample_list</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(sample_list) == <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>运行顺序：</p><p><code>fixture setup</code> → <code>test_len</code> → <code>fixture teardown</code></p><h3><span id="2-zuo-yong-yu-scope-shi-me-shi-hou-chuang-jian-xiao-hui">2. 作用域（scope）—— 什么时候创建、销毁</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span></span>)   </span><span class="hljs-comment"># 默认值：每个测试函数一次</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;class&quot;</span></span>)      </span><span class="hljs-comment"># 每个测试类一次</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)     </span><span class="hljs-comment"># 整个 test_*.py 一次</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;package&quot;</span></span>)    </span><span class="hljs-comment"># 整个包一次</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)    </span><span class="hljs-comment"># 整个 pytest 会话一次</span><br></code></pre></td></tr></table></figure><h3><span id="3-nei-zhi-x2f-chang-yong-fixture-su-cha">3. 内置&#x2F;常用 fixture 速查</span></h3><table><thead><tr><th>内置 fixture</th><th>作用</th></tr></thead><tbody><tr><td><code>tmp_path</code></td><td>提供 <code>pathlib.Path</code> 临时目录，函数级</td></tr><tr><td><code>tmp_path_factory</code></td><td>同上，但可跨作用域</td></tr><tr><td><code>monkeypatch</code></td><td>安全地打补丁（环境变量、模块属性等）</td></tr><tr><td><code>capsys</code> &#x2F; <code>capfd</code></td><td>捕获 stdout&#x2F;stderr 或文件描述符</td></tr><tr><td><code>request</code></td><td>提供测试上下文（模块名、配置、参数）</td></tr></tbody></table><h2><span id="wu-can-shu-hua-yi-tiao-ce-shi-duo-zu-shu-ju">五、参数化：一条测试多组数据</span></h2><p>将上面的<code>tests/test_entities.py</code>改造为可以一次测试多组数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> core.entities <span class="hljs-keyword">import</span> Chemical<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestChemicalEntity</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_valid_chemical</span>(<span class="hljs-params">self</span>):  <br>        chem = Chemical(  <br>            <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CHEM001&quot;</span>,  <br>            name=<span class="hljs-string">&quot;硫酸&quot;</span>,  <br>            en_name=<span class="hljs-string">&quot;Sulfuric Acid&quot;</span>,  <br>            cas=<span class="hljs-string">&quot;7664-93-9&quot;</span>,  <br>        )  <br>        <span class="hljs-keyword">assert</span> chem.cas == <span class="hljs-string">&quot;7664-93-9&quot;</span>   <br>  <br><span class="hljs-meta">    @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;cas_num, is_valid&quot;</span>, [  </span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;7732-18-5&quot;</span>, <span class="hljs-literal">True</span></span>),  <span class="hljs-comment"># 水的CAS号  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;64-17-5&quot;</span>, <span class="hljs-literal">True</span></span>),  <span class="hljs-comment"># 乙醇  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;123-45-6&quot;</span>, <span class="hljs-literal">True</span></span>),  <span class="hljs-comment"># 格式正确（虽然可能不存在）  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;1-23-4&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 第一部分太短  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;12345678-90-1&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 第一部分太长  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;123-456-7&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 第二部分应为2位  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;abc-de-f&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 包含非数字字符  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-literal">None</span>, <span class="hljs-literal">True</span></span>)  <span class="hljs-comment"># 允许为空  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">    ]</span>)  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_cas_validation</span>(<span class="hljs-params">self, cas_num, is_valid</span>):  <br>        <span class="hljs-keyword">if</span> is_valid:  <br>            chem = Chemical(  <br>                <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;TEST&quot;</span>,  <br>                name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                en_name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                cas=cas_num,  <br>            )  <br>            <span class="hljs-keyword">assert</span> chem.cas == cas_num  <br>        <span class="hljs-keyword">else</span>:  <br>            <span class="hljs-keyword">with</span> pytest.raises(ValidationError):  <br>                Chemical(  <br>                    <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;TEST&quot;</span>,  <br>                    name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                    en_name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                    cas=cas_num,  <br>                )<br></code></pre></td></tr></table></figure><p>运行时会生成 8 个独立的测试节点，失败互不影响。</p><h2><span id="liu-biao-ji-fen-lei-ce-shi">六、标记：分类测试</span></h2><h3><span id="1-ding-yi-biao-ji">1. 定义标记</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.mark.slow</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_chemical</span>():<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3><span id="2-yun-xing-zhi-ding-biao-ji">2. 运行指定标记</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pytest -m <span class="hljs-string">&quot;slow&quot;</span><br>pytest -m <span class="hljs-string">&quot;not slow&quot;</span><br></code></pre></td></tr></table></figure><h2><span id="qi-chang-yong-cli-xuan-xiang">七、常用 CLI 选项</span></h2><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-v</code> &#x2F; <code>--verbose</code></td><td>详细输出</td></tr><tr><td><code>-q</code> &#x2F; <code>--quiet</code></td><td>极简输出</td></tr><tr><td><code>-k EXPRESSION</code></td><td>按名字过滤测试，支持表达式（<code>&quot;test_add or test_sub&quot;</code>）</td></tr><tr><td><code>-x</code></td><td>首次失败即停止</td></tr><tr><td><code>--tb=short/line/no</code></td><td>控制回溯格式</td></tr><tr><td><code>--lf</code></td><td>仅运行上次失败的测试</td></tr><tr><td><code>--cov=src</code></td><td>生成覆盖率报告（需 <code>pytest-cov</code>）</td></tr></tbody></table><h2><span id="ba-cha-jian-tui-jian">八、插件推荐</span></h2><table><thead><tr><th>插件</th><th>作用</th></tr></thead><tbody><tr><td><code>pytest-cov</code></td><td>代码覆盖率</td></tr><tr><td><code>pytest-xdist</code></td><td>并发运行（<code>-n auto</code>）</td></tr><tr><td><code>pytest-mock</code></td><td>集成 <code>unittest.mock</code> 并提供 <code>mocker</code> fixture</td></tr><tr><td><code>pytest-django</code></td><td>Django 集成</td></tr><tr><td><code>pytest-asyncio</code></td><td>原生支持 <code>async/await</code></td></tr><tr><td><code>pytest-html</code></td><td>生成漂亮 HTML 报告</td></tr><tr><td><code>pytest-timeout</code></td><td>设置超时</td></tr></tbody></table><h2><span id="jiu-zui-jia-shi-jian-xiao-jie">九、最佳实践小结</span></h2><ol><li><p>项目根目录放 <code>tests/</code> 文件夹，保持与 <code>src/</code> 平级。</p></li><li><p>每个测试文件专注一个小模块，命名 <code>test_&lt;module&gt;.py</code>。</p></li><li><p>优先使用原生 <code>assert</code>，足够直观。</p></li><li><p>把 <strong>环境准备&#x2F;清理</strong> 写成 fixture，提高复用性。</p></li><li><p>用 <code>@pytest.mark.parametrize</code> 减少重复用例。</p></li><li><p>用标记分类“慢测试”“集成测试”等，CI&#x2F;CD 中选择性运行。</p></li><li><p>给公共 fixture 加 <code>scope=&quot;session&quot;</code> 减少耗时。</p></li><li><p>合理配置 <code>pytest.ini</code>&#x2F;<code>pyproject.toml</code>，集中管理选项和标记。</p></li></ol><h2><span id="can-kao-lian-jie">参考链接</span></h2><ul><li><p>官方文档：<a href="https://docs.pytest.org/">https://docs.pytest.org/</a></p></li><li><p>插件列表：<a href="https://docs.pytest.org/en/stable/reference/plugin_list.html">https://docs.pytest.org/en/stable/reference/plugin_list.html</a></p></li><li><p>Awesome pytest：<a href="https://github.com/augustogoulart/awesome-pytest">https://github.com/augustogoulart/awesome-pytest</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pydantic-数据验证和解析</title>
    <link href="/2025/08/01/Python/2025-08-01-pydantic-%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E5%92%8C%E8%A7%A3%E6%9E%90/"/>
    <url>/2025/08/01/Python/2025-08-01-pydantic-%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E5%92%8C%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>构建一个简易的demo验证mmkg设计方案的可行性</title>
    <link href="/2025/08/01/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-08-01-%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84demo%E9%AA%8C%E8%AF%81mmkg%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7/"/>
    <url>/2025/08/01/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-08-01-%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84demo%E9%AA%8C%E8%AF%81mmkg%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>为验证多模态知识图谱本体设计是否合理，数据链路是否通畅，博主决定设计一个简易的demo进行验证，并以此指导后续完整图谱的设计。</p></blockquote><p>下面先介绍chemical_mmkg_demo-v1的组织结构</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nix">chemical_mmkg_demo<span class="hljs-symbol">/</span><br>├── core<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 核心领域模型</span><br>│   ├── __init__.py<br>│   ├── entities.py            <span class="hljs-comment"># Chemical/Hazard等核心类定义</span><br>│   ├── relations.py           <span class="hljs-comment"># RelationType枚举及关系验证</span><br>│   └── exceptions.py          <span class="hljs-comment"># 自定义异常类</span><br>│<br>├── data<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 数据相关</span><br>│   └── sample_data<span class="hljs-symbol">/</span>           <span class="hljs-comment"># 测试用YAML/JSON数据</span><br>│<br>├── services<span class="hljs-symbol">/</span>                  <span class="hljs-comment"># 业务逻辑</span><br>│   └── graph_service.py       <span class="hljs-comment"># 图谱构建/查询服务</span><br>│<br>├── tests<span class="hljs-symbol">/</span>                     <span class="hljs-comment"># 测试套件</span><br>│   └── unit<span class="hljs-symbol">/</span><br>│       └── test_entities.py<br>│<br>├── demo<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 演示用例</span><br>│   ├── setup_sample_graph.py  <span class="hljs-comment"># 初始化测试数据</span><br>│   └── query_examples.py      <span class="hljs-comment"># 典型查询示例</span><br>│<br>└── utils<span class="hljs-symbol">/</span><br>└── config_loader.py       <span class="hljs-comment"># 图谱构建/查询服务</span><br></code></pre></td></tr></table></figure><p>代码清单：</p><h3><span id="1-he-xin-ling-yu-mo-xing">1. 核心领域模型</span></h3><h4><span id="core-entities-py"><code>core/entities.py</code></span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum  <br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>  <br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel, Field, field_validator  <br><span class="hljs-keyword">import</span> re  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhysicalState</span>(<span class="hljs-built_in">str</span>, Enum):  <br>    SOLID = <span class="hljs-string">&quot;solid&quot;</span>  <br>    LIQUID = <span class="hljs-string">&quot;liquid&quot;</span>  <br>    GAS = <span class="hljs-string">&quot;gas&quot;</span>  <br>    AEROSOL = <span class="hljs-string">&quot;aerosol&quot;</span>  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HazardCategory</span>(<span class="hljs-built_in">str</span>, Enum):  <br>    PHYSICAL = <span class="hljs-string">&quot;physical&quot;</span>  <br>    HEALTH = <span class="hljs-string">&quot;health&quot;</span>  <br>    ENVIRONMENTAL = <span class="hljs-string">&quot;environmental&quot;</span> <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;化学品核心实体&quot;&quot;&quot;</span>  <br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span> = Field(..., min_length=<span class="hljs-number">3</span>, description=<span class="hljs-string">&quot;唯一标识符（CAS或内部ID）&quot;</span>)  <br>    name: <span class="hljs-built_in">str</span> = Field(..., max_length=<span class="hljs-number">100</span>, description=<span class="hljs-string">&quot;中文名称&quot;</span>)  <br>    en_name: <span class="hljs-built_in">str</span> = Field(..., max_length=<span class="hljs-number">100</span>, description=<span class="hljs-string">&quot;英文名称&quot;</span>)  <br>    cas: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = Field(<span class="hljs-literal">None</span>, description=<span class="hljs-string">&quot;CAS登记号&quot;</span>)  <br>    un: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = Field(<span class="hljs-literal">None</span>, pattern=<span class="hljs-string">r&#x27;^UN\d&#123;4&#125;$&#x27;</span>, description=<span class="hljs-string">&quot;UN编号&quot;</span>)  <br>    molecular_formula: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;分子式&quot;</span>)  <br>    physical_state: PhysicalState = Field(..., description=<span class="hljs-string">&quot;物理状态&quot;</span>)   <br>  <br><span class="hljs-meta">    @field_validator(<span class="hljs-params"><span class="hljs-string">&#x27;cas&#x27;</span></span>)  </span><br><span class="hljs-meta">    @classmethod  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_cas</span>(<span class="hljs-params">cls, v: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]:  <br>    <span class="hljs-string">&quot;&quot;&quot;cas格式验证&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> v <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:  <br>            <span class="hljs-keyword">return</span> v  <br>  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.fullmatch(<span class="hljs-string">r&#x27;^\d&#123;2,7&#125;-\d&#123;2&#125;-\d$&#x27;</span>, v):  <br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Invalid CAS number format&quot;</span>)  <br>  <br>        parts = v.split(<span class="hljs-string">&#x27;-&#x27;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts[<span class="hljs-number">0</span>]) &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(parts[<span class="hljs-number">0</span>]) &gt; <span class="hljs-number">7</span>:  <br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;CAS first segment must be 2-7 digits&quot;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts[<span class="hljs-number">1</span>]) != <span class="hljs-number">2</span>:  <br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;CAS second segment must be 2 digits&quot;</span>)  <br>  <br>        <span class="hljs-keyword">return</span> v  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dict_for_neo4j</span>(<span class="hljs-params">self</span>):  <br>    data = <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">dict</span>()  <br>    <span class="hljs-comment"># 将枚举转换为字符串值  </span><br>    data[<span class="hljs-string">&quot;physical_state&quot;</span>] = <span class="hljs-variable language_">self</span>.physical_state.value  <br>    <span class="hljs-keyword">return</span> data<br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;危害特性实体&quot;&quot;&quot;</span>  <br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;危害唯一ID&quot;</span>)<br>    name: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;危害名称&quot;</span>)  <br>    code: <span class="hljs-built_in">str</span> = Field(..., pattern=<span class="hljs-string">r&#x27;^(GHS|H)\d+$&#x27;</span>, description=<span class="hljs-string">&quot;GHS/H代码&quot;</span>)  <br>    severity: <span class="hljs-built_in">int</span> = Field(<span class="hljs-number">1</span>, ge=<span class="hljs-number">1</span>, le=<span class="hljs-number">5</span>, description=<span class="hljs-string">&quot;危险等级&quot;</span>)  <br>    category: HazardCategory = Field(..., description=<span class="hljs-string">&quot;危害类别&quot;</span>)<br>    icon: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = Field(<span class="hljs-literal">None</span>, description=<span class="hljs-string">&quot;图标路径&quot;</span>)  <br>  <br><span class="hljs-meta">    @field_validator(<span class="hljs-params"><span class="hljs-string">&#x27;severity&#x27;</span></span>)  </span><br><span class="hljs-meta">@classmethod  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_severity</span>(<span class="hljs-params">cls, v: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:  <br>    <span class="hljs-keyword">if</span> v &gt; <span class="hljs-number">3</span>:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;警告：高风险等级 <span class="hljs-subst">&#123;v&#125;</span>！需要特殊处理&quot;</span>)  <br>    <span class="hljs-keyword">return</span> v<br></code></pre></td></tr></table></figure><h4><span id="core-relations-py"><code>core/relations.py</code></span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum  <br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>  <br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel, Field, field_validator    <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RelationType</span>(<span class="hljs-title class_ inherited__">Enum</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;标准关系类型枚举&quot;&quot;&quot;</span>  <br>    HAS_HAZARD = <span class="hljs-string">&quot;hasHazard&quot;</span>  <br>    HAS_COMPONENT = <span class="hljs-string">&quot;hasComponent&quot;</span>  <br>    DEPICTED_BY = <span class="hljs-string">&quot;depictedBy&quot;</span>  <span class="hljs-comment"># 修正拼写错误  </span><br>    HAS_MOLECULAR_WEIGHT = <span class="hljs-string">&quot;molWeight&quot;</span>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvidenceTriple</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;多模态证据三元组&quot;&quot;&quot;</span>  <br>    head: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;头实体ID&quot;</span>)  <br>    relation: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;关系类型&quot;</span>)  <br>    tail: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;尾实体ID或值&quot;</span>)  <br>    modality: <span class="hljs-built_in">str</span> = Field(..., pattern=<span class="hljs-string">&quot;^(text|image|video)$&quot;</span>)  <span class="hljs-comment"># 修改这里  </span><br>    source: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;数据来源&quot;</span>)  <br>    confidence: <span class="hljs-built_in">float</span> = Field(<span class="hljs-number">0.9</span>, ge=<span class="hljs-number">0</span>, le=<span class="hljs-number">1</span>)  <br>    timestamp: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = Field(<span class="hljs-literal">None</span>, description=<span class="hljs-string">&quot;时间戳&quot;</span>)  <br>  <br><span class="hljs-meta">    @field_validator(<span class="hljs-params"><span class="hljs-string">&#x27;relation&#x27;</span></span>)</span><br><span class="hljs-meta">    @classmethod  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_relation</span>(<span class="hljs-params">cls, v</span>):  <br>        <span class="hljs-keyword">if</span> v <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [t.value <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> RelationType]:  <br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;无效关系类型: <span class="hljs-subst">&#123;v&#125;</span>&quot;</span>)  <br>        <span class="hljs-keyword">return</span> v<br></code></pre></td></tr></table></figure><h4><span id="core-exceptions-py"><code>core/exceptions.py</code></span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChemicalKGError</span>(<span class="hljs-title class_ inherited__">Exception</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;基础异常类&quot;&quot;&quot;</span>  <br>    <span class="hljs-keyword">pass</span>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InvalidCASError</span>(<span class="hljs-title class_ inherited__">ChemicalKGError</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;CAS号格式错误&quot;&quot;&quot;</span>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cas: <span class="hljs-built_in">str</span>, message: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span>):  <br>        <span class="hljs-variable language_">self</span>.cas = cas  <br>        <span class="hljs-variable language_">self</span>.message = message <span class="hljs-keyword">or</span> <span class="hljs-string">f&quot;无效的CAS号格式: <span class="hljs-subst">&#123;cas&#125;</span>&quot;</span>  <br>        <span class="hljs-built_in">super</span>().__init__(<span class="hljs-variable language_">self</span>.message)<br></code></pre></td></tr></table></figure><h3><span id="2-shu-ju-fu-wu-ceng">2. 数据服务层</span></h3><h4><span id="services-graph-service-py"><code>services/graph_service.py</code></span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Optional</span> <br><span class="hljs-keyword">from</span> neo4j <span class="hljs-keyword">import</span> AsyncGraphDatabase<br><span class="hljs-keyword">from</span> core.entities <span class="hljs-keyword">import</span> Chemical, Hazard  <br><span class="hljs-keyword">from</span> core.relations <span class="hljs-keyword">import</span> EvidenceTriple, RelationType  <br><span class="hljs-keyword">from</span> core.exceptions <span class="hljs-keyword">import</span> ChemicalKGError  <br><span class="hljs-keyword">import</span> logging<br><br>logger = logging.getLogger(__name__)<br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChemicalGraphService</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-comment"># 确保初始化了数据库连接  </span><br>        <span class="hljs-variable language_">self</span>.driver = AsyncGraphDatabase.driver(<span class="hljs-string">&quot;http://localhost:7687&quot;</span>, auth=(<span class="hljs-string">&quot;neo4j&quot;</span>, <span class="hljs-string">&quot;12345678&quot;</span>))  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-keyword">await</span> <span class="hljs-variable language_">self</span>.driver.close()  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_chemical</span>(<span class="hljs-params">self, chemical: Chemical</span>) -&gt; <span class="hljs-built_in">bool</span>:  <br>        <span class="hljs-string">&quot;&quot;&quot;创建或获取化学品节点&quot;&quot;&quot;</span>  <br>        query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">        MERGE (c:Chemical &#123;id: $id&#125;)        </span><br><span class="hljs-string">        ON CREATE SET            </span><br><span class="hljs-string">        c.name = $name,            </span><br><span class="hljs-string">        c.en_name = $en_name,            </span><br><span class="hljs-string">        c.cas = $cas,            </span><br><span class="hljs-string">        c.un = $un,            </span><br><span class="hljs-string">        c.molecular_formula = $molecular_formula,            </span><br><span class="hljs-string">        c.physical_state = $physical_state        </span><br><span class="hljs-string">    RETURN c        </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>        <br>    <span class="hljs-keyword">try</span>:  <br>            <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>                result = <span class="hljs-keyword">await</span> session.run(query, **chemical.dict_for_neo4j())  <br>                record = <span class="hljs-keyword">await</span> result.single()  <br>                <span class="hljs-keyword">if</span> record:  <br>                    logger.info(<span class="hljs-string">f&quot;已存在或创建化学品: <span class="hljs-subst">&#123;chemical.name&#125;</span>&quot;</span>)  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>            logger.error(<span class="hljs-string">f&quot;化学品操作失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_hazard</span>(<span class="hljs-params">self, hazard: Hazard</span>) -&gt; <span class="hljs-built_in">bool</span>:  <br>        <span class="hljs-string">&quot;&quot;&quot;创建或获取危害节点&quot;&quot;&quot;</span>  <br>        query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">        MERGE (h:Hazard &#123;id: $id&#125;)        </span><br><span class="hljs-string">        ON CREATE SET            </span><br><span class="hljs-string">        h.name = $name,            </span><br><span class="hljs-string">        h.code = $code,            </span><br><span class="hljs-string">        h.severity = $severity,            </span><br><span class="hljs-string">        h.category = $category        </span><br><span class="hljs-string">    RETURN h        </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>        <br>    <span class="hljs-keyword">try</span>:  <br>            <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>                result = <span class="hljs-keyword">await</span> session.run(query, **hazard.<span class="hljs-built_in">dict</span>())  <br>                record = <span class="hljs-keyword">await</span> result.single()  <br>                <span class="hljs-keyword">if</span> record:  <br>                    logger.info(<span class="hljs-string">f&quot;已存在或创建危害: <span class="hljs-subst">&#123;hazard.name&#125;</span>&quot;</span>)  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>            logger.error(<span class="hljs-string">f&quot;危害操作失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_relationship</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            self,  </span><br><span class="hljs-params">            source_id: <span class="hljs-built_in">str</span>,  </span><br><span class="hljs-params">            target_id: <span class="hljs-built_in">str</span>,  </span><br><span class="hljs-params">            relation_type: RelationType,  </span><br><span class="hljs-params">            evidence: <span class="hljs-type">List</span>[<span class="hljs-built_in">dict</span>] = <span class="hljs-literal">None</span>,  </span><br><span class="hljs-params">            **properties  </span><br><span class="hljs-params">    </span>) -&gt; <span class="hljs-built_in">bool</span>:  <br>        <span class="hljs-string">&quot;&quot;&quot;创建或更新节点间关系（幂等操作）&quot;&quot;&quot;</span>  <br>        query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">        MATCH (a &#123;id: $source_id&#125;), (b &#123;id: $target_id&#125;)        </span><br><span class="hljs-string">        MERGE (a)-[r:%s]-&gt;(b)        </span><br><span class="hljs-string">        SET r += $rel_properties        </span><br><span class="hljs-string">        RETURN r        </span><br><span class="hljs-string">        &quot;&quot;&quot;</span> % relation_type.value  <br>  <br>        rel_properties = &#123;&#125;  <br>        <span class="hljs-keyword">if</span> evidence:  <br>            <span class="hljs-keyword">import</span> json  <br>            rel_properties[<span class="hljs-string">&quot;evidence_json&quot;</span>] = json.dumps(evidence, ensure_ascii=<span class="hljs-literal">False</span>)  <br>        rel_properties.update(properties)  <br>  <br>        <span class="hljs-keyword">try</span>:  <br>            <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>                result = <span class="hljs-keyword">await</span> session.run(query,  <br>                                           source_id=source_id,  <br>                                           target_id=target_id,  <br>                                           rel_properties=rel_properties  <br>                                           )  <br>                record = <span class="hljs-keyword">await</span> result.single()  <br>                <span class="hljs-keyword">if</span> record:  <br>                    logger.info(<span class="hljs-string">f&quot;关系已存在或更新: <span class="hljs-subst">&#123;source_id&#125;</span>-[<span class="hljs-subst">&#123;relation_type.value&#125;</span>]-&gt;<span class="hljs-subst">&#123;target_id&#125;</span>&quot;</span>)  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>            logger.error(<span class="hljs-string">f&quot;关系操作失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br>  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_chemical_by_cas</span>(<span class="hljs-params">self, cas: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Optional</span>[Chemical]:  <br>        <span class="hljs-string">&quot;&quot;&quot;通过CAS号查询化学品&quot;&quot;&quot;</span>  <br>        query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">                MATCH (c:Chemical &#123;cas: $cas&#125;)                </span><br><span class="hljs-string">                RETURN c                </span><br><span class="hljs-string">                &quot;&quot;&quot;</span>        <br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>            <span class="hljs-keyword">try</span>:  <br>                result = <span class="hljs-keyword">await</span> session.run(query, cas=cas)  <br>                record = <span class="hljs-keyword">await</span> result.single()  <br>                <span class="hljs-keyword">return</span> record[<span class="hljs-string">&quot;c&quot;</span>] <span class="hljs-keyword">if</span> record <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>  <br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;查询化学品失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_chemical_hazards</span>(<span class="hljs-params">self, chemical_id: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[Hazard]:  <br>        <span class="hljs-string">&quot;&quot;&quot;获取化学品的所有危害（去重）&quot;&quot;&quot;</span>  <br>        query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">        MATCH (c:Chemical &#123;id: $chemical_id&#125;)-[:HAS_HAZARD]-&gt;(h:Hazard)        </span><br><span class="hljs-string">        RETURN DISTINCT properties(h) as hazard        </span><br><span class="hljs-string">        &quot;&quot;&quot;</span>        <br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>            result = <span class="hljs-keyword">await</span> session.run(query, chemical_id=chemical_id)  <br>            <span class="hljs-keyword">return</span> [Hazard(**record[<span class="hljs-string">&quot;hazard&quot;</span>]) <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> result]  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_incompatible_chemicals</span>(<span class="hljs-params">self, chemical_id: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[Chemical]:  <br>        <span class="hljs-string">&quot;&quot;&quot;查找不相容化学品（去重）&quot;&quot;&quot;</span>  <br>        query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">        MATCH (c1:Chemical &#123;id: $chemical_id&#125;)-[:INCOMPATIBLE_WITH]-&gt;(c2:Chemical)        </span><br><span class="hljs-string">        RETURN DISTINCT properties(c2) as chemical        </span><br><span class="hljs-string">        &quot;&quot;&quot;</span>        <br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>            result = <span class="hljs-keyword">await</span> session.run(query, chemical_id=chemical_id)  <br>            <span class="hljs-keyword">return</span> [Chemical(**record[<span class="hljs-string">&quot;chemical&quot;</span>]) <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> result]  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_related_entities</span>(<span class="hljs-params">self, entity_id: <span class="hljs-built_in">str</span>, relation_type: RelationType</span>) -&gt; <span class="hljs-built_in">list</span>:  <br>        <span class="hljs-string">&quot;&quot;&quot;获取指定关系的所有关联实体&quot;&quot;&quot;</span>  <br>        query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">                MATCH (source &#123;id: $entity_id&#125;)-[r:%s]-&gt;(target)                </span><br><span class="hljs-string">                RETURN properties(target) as entity                </span><br><span class="hljs-string">                &quot;&quot;&quot;</span> % relation_type.value  <br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>            result = <span class="hljs-keyword">await</span> session.run(query, entity_id=entity_id)  <br>            <span class="hljs-keyword">return</span> [record[<span class="hljs-string">&quot;entity&quot;</span>] <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> result]  <br>  <br>  <br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_chemical_evidence</span>(<span class="hljs-params">  </span><br><span class="hljs-params">            self,  </span><br><span class="hljs-params">            chemical_id: <span class="hljs-built_in">str</span>,  </span><br><span class="hljs-params">            relation_type: <span class="hljs-type">Optional</span>[RelationType] = <span class="hljs-literal">None</span>  </span><br><span class="hljs-params">    </span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">dict</span>]:  <br>        <span class="hljs-string">&quot;&quot;&quot;获取化学品的相关证据（支持JSON解析）&quot;&quot;&quot;</span>  <br>        <span class="hljs-keyword">import</span> json  <br>  <br>        <span class="hljs-keyword">if</span> relation_type:  <br>            query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">            MATCH (c &#123;id: $chemical_id&#125;)-[r]-&gt;()            </span><br><span class="hljs-string">            WHERE type(r) = $relation_type AND r.evidence_json IS NOT NULL            </span><br><span class="hljs-string">            RETURN r.evidence_json as evidence_json            </span><br><span class="hljs-string">            &quot;&quot;&quot;</span>            <br>            params = &#123;<span class="hljs-string">&quot;chemical_id&quot;</span>: chemical_id, <span class="hljs-string">&quot;relation_type&quot;</span>: relation_type.value&#125;  <br>        <span class="hljs-keyword">else</span>:  <br>            query = <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">            MATCH (c &#123;id: $chemical_id&#125;)-[r]-&gt;()            </span><br><span class="hljs-string">            WHERE r.evidence_json IS NOT NULL            </span><br><span class="hljs-string">            RETURN r.evidence_json as evidence_json            </span><br><span class="hljs-string">            &quot;&quot;&quot;</span>            <br>            params = &#123;<span class="hljs-string">&quot;chemical_id&quot;</span>: chemical_id&#125;  <br>  <br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.driver.session() <span class="hljs-keyword">as</span> session:  <br>            result = <span class="hljs-keyword">await</span> session.run(query, **params)  <br>            evidence = []  <br>            <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> result:  <br>                <span class="hljs-keyword">if</span> record[<span class="hljs-string">&quot;evidence_json&quot;</span>]:  <br>                    <span class="hljs-keyword">try</span>:  <br>                        evidence.extend(json.loads(record[<span class="hljs-string">&quot;evidence_json&quot;</span>]))  <br>                    <span class="hljs-keyword">except</span> json.JSONDecodeError:  <br>                        logger.error(<span class="hljs-string">f&quot;证据JSON解析失败: <span class="hljs-subst">&#123;record[<span class="hljs-string">&#x27;evidence_json&#x27;</span>]&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span> evidence<br></code></pre></td></tr></table></figure><h3><span id="3-ce-shi-yong-li">3. 测试用例</span></h3><h4><span id="tests-unit-test-entities-py"><code>tests/unit/test_entities.py</code></span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest  <br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> ValidationError  <br><span class="hljs-keyword">from</span> core.entities <span class="hljs-keyword">import</span> Chemical, Hazard, PhysicalState  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestChemicalEntity</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_valid_chemical</span>(<span class="hljs-params">self</span>):  <br>        chem = Chemical(  <br>            <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CHEM001&quot;</span>,  <br>            name=<span class="hljs-string">&quot;硫酸&quot;</span>,  <br>            en_name=<span class="hljs-string">&quot;Sulfuric Acid&quot;</span>,  <br>            cas=<span class="hljs-string">&quot;7664-93-9&quot;</span>,  <br>            un=<span class="hljs-string">&quot;UN1830&quot;</span>,  <br>            molecular_formula=<span class="hljs-string">&quot;H2SO4&quot;</span>,  <br>            physical_state=PhysicalState.LIQUID  <br>        )  <br>        <span class="hljs-keyword">assert</span> chem.cas == <span class="hljs-string">&quot;7664-93-9&quot;</span>  <br>        <span class="hljs-keyword">assert</span> chem.physical_state == PhysicalState.LIQUID  <br>  <br><span class="hljs-meta">    @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;cas_num, is_valid&quot;</span>, [  </span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;7732-18-5&quot;</span>, <span class="hljs-literal">True</span></span>),  <span class="hljs-comment"># 水的CAS号  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;64-17-5&quot;</span>, <span class="hljs-literal">True</span></span>),  <span class="hljs-comment"># 乙醇  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;123-45-6&quot;</span>, <span class="hljs-literal">True</span></span>),  <span class="hljs-comment"># 格式正确（虽然可能不存在）  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;1-23-4&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 第一部分太短  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;12345678-90-1&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 第一部分太长  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;123-456-7&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 第二部分应为2位  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-string">&quot;abc-de-f&quot;</span>, <span class="hljs-literal">False</span></span>),  <span class="hljs-comment"># 包含非数字字符  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">        (<span class="hljs-params"><span class="hljs-literal">None</span>, <span class="hljs-literal">True</span></span>)  <span class="hljs-comment"># 允许为空  </span></span></span><br><span class="hljs-params"><span class="hljs-meta">    ]</span>)  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_cas_validation</span>(<span class="hljs-params">self, cas_num, is_valid</span>):  <br>        <span class="hljs-keyword">if</span> is_valid:  <br>            chem = Chemical(  <br>                <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;TEST&quot;</span>,  <br>                name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                en_name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                cas=cas_num,  <br>                molecular_formula=<span class="hljs-string">&quot;X&quot;</span>,  <br>                physical_state=PhysicalState.SOLID  <br>            )  <br>            <span class="hljs-keyword">assert</span> chem.cas == cas_num  <br>        <span class="hljs-keyword">else</span>:  <br>            <span class="hljs-keyword">with</span> pytest.raises(ValidationError):  <br>                Chemical(  <br>                    <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;TEST&quot;</span>,  <br>                    name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                    en_name=<span class="hljs-string">&quot;Test&quot;</span>,  <br>                    cas=cas_num,  <br>                    molecular_formula=<span class="hljs-string">&quot;X&quot;</span>,  <br>                    physical_state=PhysicalState.SOLID  <br>                )  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestHazardEntity</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_hazard_severity_warning</span>(<span class="hljs-params">self, capsys</span>):  <br>        hazard = Hazard(name=<span class="hljs-string">&quot;爆炸性&quot;</span>, code=<span class="hljs-string">&quot;H204&quot;</span>, severity=<span class="hljs-number">4</span>)  <br>        captured = capsys.readouterr()  <br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;警告：高风险等级 4&quot;</span> <span class="hljs-keyword">in</span> captured.out<br></code></pre></td></tr></table></figure><h3><span id="4-yan-shi-jiao-ben">4. 演示脚本</span></h3><h4><span id="demo-setup-sample-graph-py"><code>demo/setup_sample_graph.py</code></span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio  <br><span class="hljs-keyword">from</span> core.entities <span class="hljs-keyword">import</span> Chemical, PhysicalState, Hazard  <br><span class="hljs-keyword">from</span> core.relations <span class="hljs-keyword">import</span> RelationType  <br><span class="hljs-keyword">from</span> services.graph_service <span class="hljs-keyword">import</span> ChemicalGraphService  <br>  <br>  <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_sample_data</span>(<span class="hljs-params">service</span>):  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始初始化化学品和危害数据...&quot;</span>)  <br>  <br>    <span class="hljs-comment"># 1. 创建化学品节点  </span><br>    ethanol = Chemical(  <br>        <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CAS64-17-5&quot;</span>,  <br>        name=<span class="hljs-string">&quot;乙醇&quot;</span>,  <br>        en_name=<span class="hljs-string">&quot;Ethanol&quot;</span>,  <br>        cas=<span class="hljs-string">&quot;64-17-5&quot;</span>,  <br>        un=<span class="hljs-string">&quot;UN1170&quot;</span>,  <br>        molecular_formula=<span class="hljs-string">&quot;C2H5OH&quot;</span>,  <br>        physical_state=PhysicalState.LIQUID  <br>    )  <br>    oxygen = Chemical(  <br>        <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CAS7782-44-7&quot;</span>,  <br>        name=<span class="hljs-string">&quot;氧气&quot;</span>,  <br>        en_name=<span class="hljs-string">&quot;Oxygen&quot;</span>,  <br>        cas=<span class="hljs-string">&quot;7782-44-7&quot;</span>,  <br>        un=<span class="hljs-string">&quot;UN1072&quot;</span>,  <br>        molecular_formula=<span class="hljs-string">&quot;O2&quot;</span>,  <br>        physical_state=PhysicalState.GAS  <br>    )  <br>  <br>    <span class="hljs-comment"># 2. 创建危害节点  </span><br>    flammability = Hazard(  <br>        <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;GHS02&quot;</span>,  <br>        name=<span class="hljs-string">&quot;易燃液体&quot;</span>,  <br>        code=<span class="hljs-string">&quot;GHS02&quot;</span>,  <br>        severity=<span class="hljs-number">3</span>,  <br>        category=<span class="hljs-string">&quot;physical&quot;</span>  <br>    )  <br>    oxidizer = Hazard(  <br>        <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;GHS03&quot;</span>,  <br>        name=<span class="hljs-string">&quot;氧化性气体&quot;</span>,  <br>        code=<span class="hljs-string">&quot;GHS03&quot;</span>,  <br>        severity=<span class="hljs-number">2</span>,  <br>        category=<span class="hljs-string">&quot;physical&quot;</span>  <br>    )  <br>  <br>    <span class="hljs-comment"># 保存节点  </span><br>    <span class="hljs-keyword">await</span> service.create_chemical(ethanol)  <br>    <span class="hljs-keyword">await</span> service.create_chemical(oxygen)  <br>    <span class="hljs-keyword">await</span> service.add_hazard(flammability)  <br>    <span class="hljs-keyword">await</span> service.add_hazard(oxidizer)  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;基础节点创建完成&quot;</span>)  <br>  <br>    <span class="hljs-comment"># 3. 建立关系  </span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n开始建立关系...&quot;</span>)  <br>    <span class="hljs-comment"># 修改证据数据格式（确保所有值为基本类型）  </span><br>    evidence_data = [&#123;  <br>        <span class="hljs-string">&quot;head&quot;</span>: ethanol.<span class="hljs-built_in">id</span>,  <br>        <span class="hljs-string">&quot;relation&quot;</span>: RelationType.HAS_HAZARD.value,  <br>        <span class="hljs-string">&quot;tail&quot;</span>: flammability.<span class="hljs-built_in">id</span>,  <br>        <span class="hljs-string">&quot;modality&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,  <br>        <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;GHS标准&quot;</span>,  <br>        <span class="hljs-string">&quot;confidence&quot;</span>: <span class="hljs-number">0.95</span>  <span class="hljs-comment"># 添加数值类型示例  </span><br>    &#125;]  <br>  <br>    <span class="hljs-comment"># 化学品-危害关系  </span><br>    <span class="hljs-keyword">await</span> service.create_relationship(  <br>        source_id=ethanol.<span class="hljs-built_in">id</span>,  <br>        target_id=flammability.<span class="hljs-built_in">id</span>,  <br>        relation_type=RelationType.HAS_HAZARD,  <br>        evidence=evidence_data  <br>    )  <br>  <br>    <span class="hljs-comment"># 不相容关系示例  </span><br>    <span class="hljs-keyword">await</span> service.create_relationship(  <br>        source_id=ethanol.<span class="hljs-built_in">id</span>,  <br>        target_id=oxygen.<span class="hljs-built_in">id</span>,  <br>        relation_type=RelationType.INCOMPATIBLE_WITH,  <br>        evidence=[&#123;  <br>            <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;实验室安全手册&quot;</span>,  <br>            <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-string">&quot;易燃物与氧化剂接触可能引发火灾&quot;</span>,  <br>            <span class="hljs-string">&quot;reference&quot;</span>: <span class="hljs-string">&quot;ISO-12345&quot;</span>  <br>        &#125;]  <br>    )  <br>  <br>  <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_relationships</span>(<span class="hljs-params">service</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;验证关系（显示不重复的结果）&quot;&quot;&quot;</span>  <br>    hazards = <span class="hljs-keyword">await</span> service.get_chemical_hazards(<span class="hljs-string">&quot;CAS64-17-5&quot;</span>)  <br>    incompatibles = <span class="hljs-keyword">await</span> service.find_incompatible_chemicals(<span class="hljs-string">&quot;CAS64-17-5&quot;</span>)  <br>  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;乙醇的危害属性: <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>([h.name <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> hazards]))&#125;</span>&quot;</span>)  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;乙醇不相容的化学品: <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>([c.name <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> incompatibles]))&#125;</span>&quot;</span>)  <br>  <br>  <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():  <br>    service = ChemicalGraphService()  <br>    <span class="hljs-keyword">try</span>:  <br>        <span class="hljs-keyword">await</span> setup_sample_data(service)  <br>        <span class="hljs-keyword">await</span> verify_relationships(service)  <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;程序出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>    <span class="hljs-keyword">finally</span>:  <br>        <span class="hljs-keyword">await</span> service.close()  <br>  <br>  <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <br>    asyncio.run(main())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识图谱</category>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用于危险化学品检测的多模态知识图谱构建方案</title>
    <link href="/2025/07/31/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-07-31-%E7%94%A8%E4%BA%8E%E5%8D%B1%E9%99%A9%E5%8C%96%E5%AD%A6%E5%93%81%E6%A3%80%E6%B5%8B%E7%9A%84%E5%A4%9A%E6%A8%A1%E6%80%81%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%96%B9%E6%A1%88/"/>
    <url>/2025/07/31/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-07-31-%E7%94%A8%E4%BA%8E%E5%8D%B1%E9%99%A9%E5%8C%96%E5%AD%A6%E5%93%81%E6%A3%80%E6%B5%8B%E7%9A%84%E5%A4%9A%E6%A8%A1%E6%80%81%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h3><span id="1-xu-qiu-fen-xi-yu-chang-jing-ding-yi"><strong>1. 需求分析与场景定义</strong></span></h3><ul><li><p><strong>目标</strong>：实现危险化学品的快速识别、属性查询、危害评估、应急处理推荐。</p></li><li><p><strong>应用场景</strong>：化工生产、仓储管理、应急响应、环境监测等。</p></li><li><p><strong>核心功能</strong>：</p><ul><li><p>化学品物理&#x2F;化学属性查询（如毒性、燃点、反应性）。</p></li><li><p>多模态检索（通过文本、分子结构图、光谱图像等查询）。</p></li><li><p>危害预警与应急处理建议。</p></li></ul></li></ul><hr><h3><span id="2-shu-ju-lai-yuan-yu-duo-mo-tai-shu-ju-zheng-he"><strong>2. 数据来源与多模态数据整合</strong></span></h3><h4><span id="jie-gou-hua-shu-ju"><strong>结构化数据</strong></span></h4><ul><li><p><strong>权威数据库</strong>：</p><ul><li><p>PubChem、ChemSpider（化学属性、CAS号）。</p></li><li><p>OSHA危险化学品数据库（安全规范）。</p></li><li><p>MSDS查询。</p></li></ul></li><li><p><strong>本地数据</strong>：企业化学品库存表、安全数据表（SDS&#x2F;MSDS）。</p></li></ul><h4><span id="fei-jie-gou-hua-shu-ju"><strong>非结构化数据</strong></span></h4><ul><li><p><strong>文本</strong>：科研论文（PubMed）、安全手册、应急预案。</p></li><li><p><strong>图像</strong>：化学品标签、光谱图（红外&#x2F;Raman）、分子结构图。</p></li></ul><h3><span id="3-zhi-shi-tu-pu-jian-mo-v1"><strong>3. 知识图谱建模v1</strong></span></h3><h4><span id="ben-ti-she-ji-ontology"><strong>本体设计（Ontology）</strong></span></h4><ul><li><p><strong>核心实体</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;化学品实体（核心标识信息）&quot;&quot;&quot;</span><br>    attributes:<br>        - name: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 中文名称（如&quot;硫酸&quot;）</span><br>        - en_name: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 英文名称（如&quot;Sulfuric acid&quot;）</span><br>        - CAS: <span class="hljs-built_in">str</span>                   <span class="hljs-comment"># CAS号（唯一标识，必须非空）</span><br>        - UN: <span class="hljs-built_in">str</span>                    <span class="hljs-comment"># UN编号（如&quot;1830&quot;）  </span><br>        - molecular_formula: <span class="hljs-built_in">str</span>     <span class="hljs-comment"># 分子式（如&quot;H2SO4&quot;）</span><br>        - physical_state: Enum      <span class="hljs-comment"># 物理状态（SOLID/LIQUID/GAS）</span><br>        - aliases: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]         <span class="hljs-comment"># 别名（如&quot;电池酸&quot;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;危害类型（GHS标准）&quot;&quot;&quot;</span><br>    attributes:<br>        - code: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># GHS代码（如&quot;H314&quot;）</span><br>        - <span class="hljs-built_in">type</span>: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 分类（如&quot;皮肤腐蚀/刺激&quot;）</span><br>        - severity: Enum             <span class="hljs-comment"># 危险等级（1-5级，对应GHS分类）</span><br>        - icon: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 图标文件名（如&quot;corrosive.png&quot;）</span><br>        - signal_word: Enum          <span class="hljs-comment"># 信号词（DANGER/WARNING）</span><br>        - hazard_statements: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 危险说明（如&quot;造成严重皮肤灼伤&quot;）</span><br>        - precautionary_statements: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 防范说明（如&quot;穿戴防护手套&quot;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Property</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;物理化学属性（动态补充）&quot;&quot;&quot;</span><br>    attributes:<br>        - appearance: <span class="hljs-built_in">str</span>            <span class="hljs-comment"># 外观（如&quot;无色油状液体&quot;）</span><br>        - color: <span class="hljs-built_in">str</span>                 <span class="hljs-comment"># 颜色（如&quot;淡黄色&quot;）</span><br>        - odor: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 气味（如&quot;刺激性氨味&quot;）</span><br>        - melting_point: <span class="hljs-built_in">float</span>       <span class="hljs-comment"># 熔点（℃）</span><br>        - boiling_point: <span class="hljs-built_in">float</span>       <span class="hljs-comment"># 沸点（℃）</span><br>        - flash_point: <span class="hljs-built_in">float</span>         <span class="hljs-comment"># 闪点（℃）</span><br>        - solubility: <span class="hljs-built_in">str</span>            <span class="hljs-comment"># 溶解度（如&quot;易溶于水&quot;）</span><br>        - density: <span class="hljs-built_in">float</span>             <span class="hljs-comment"># 密度（g/cm³）</span><br>        - spectral_data: <span class="hljs-type">Dict</span>        <span class="hljs-comment"># 光谱数据（键值对，如&#123;&quot;IR&quot;: &quot;url1&quot;, &quot;Raman&quot;: &quot;url2&quot;&#125;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmergencyMeasure</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;应急措施（完整流程）&quot;&quot;&quot;</span><br>    attributes:<br>        - spill_response: <span class="hljs-built_in">str</span>        <span class="hljs-comment"># 泄漏处理（如&quot;用砂土吸附&quot;）</span><br>        - first_aid: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>]  <span class="hljs-comment"># 急救措施（按暴露途径分类）:</span><br>                                     <span class="hljs-comment">#   - eye_contact: &quot;立即用清水冲洗15分钟&quot;</span><br>                                     - skin_contact: <span class="hljs-string">&quot;脱去污染衣物，用肥皂水冲洗&quot;</span><br>                                     - inhalation: <span class="hljs-string">&quot;转移至空气新鲜处&quot;</span><br>        - fire_fighting: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]   <span class="hljs-comment"># 消防措施（如&quot;使用干粉灭火器&quot;）</span><br>        - special_protection: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 特殊防护（如&quot;需自给式呼吸器&quot;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StorageRequirement</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储与操作要求&quot;&quot;&quot;</span><br>    attributes:<br>        - storage_condition: <span class="hljs-built_in">str</span>     <span class="hljs-comment"># 存储条件（如&quot;阴凉通风，远离氧化剂&quot;）</span><br>        - incompatible_materials: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 禁忌物质（CAS号列表）</span><br>        - handling_precautions: <span class="hljs-built_in">str</span>   <span class="hljs-comment"># 操作注意事项（如&quot;使用防爆工具&quot;）</span><br><br><span class="hljs-comment"># 可选</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RegulatoryInfo</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;法规合规信息&quot;&quot;&quot;</span><br>    attributes:<br>        - regulatory_standard: <span class="hljs-built_in">str</span>   <span class="hljs-comment"># 法规标准（如&quot;OSHA 1910.1200&quot;）</span><br>        - exposure_limits: <span class="hljs-type">Dict</span>       <span class="hljs-comment"># 暴露限值（如&#123;&quot;TWA&quot;: &quot;5 ppm&quot;&#125;）</span><br>        - transport_rules: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]  <span class="hljs-comment"># 运输规则（如&quot;UN编号1277, 3类危险品&quot;）</span><br></code></pre></td></tr></table></figure><p><strong>关系</strong>：</p></li><li><p><code>Chemical -[has_property]-&gt; PhysicalProperty</code></p></li><li><p><code>Chemical -[has_hazard]-&gt; Hazard</code></p></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cypher">// 创建完整的化学品节点及关系<br>CREATE (c:Chemical &#123;<br>    name: &quot;硫酸&quot;,<br>    en_name: &quot;Sulfuric acid&quot;,<br>    CAS: &quot;7664-93-9&quot;,<br>    UN: &quot;1830&quot;<br>&#125;)<br>CREATE (h:Hazard &#123;<br>    code: &quot;H314&quot;,<br>    type: &quot;皮肤腐蚀/刺激&quot;,<br>    severity: 1,<br>    icon: &quot;corrosive.png&quot;<br>&#125;)<br>CREATE (p:Property &#123;<br>    boiling_point: 337.0,<br>    density: 1.84<br>&#125;)<br>CREATE (e:EmergencyMeasure &#123;<br>    fire_fighting: [&quot;使用干粉灭火器&quot;, &quot;禁止用水&quot;]<br>&#125;)<br>CREATE (s:StorageRequirement &#123;<br>    storage_condition: &quot;与碱类分开存放&quot;<br>&#125;)<br>MERGE (c)-[:HAS_HAZARD]-&gt;(h)<br>MERGE (c)-[:HAS_PROPERTY]-&gt;(p)<br>MERGE (c)-[:HAS_EMERGENCY_MEASURE]-&gt;(e)<br>MERGE (c)-[:HAS_STORAGE_REQ]-&gt;(s)<br></code></pre></td></tr></table></figure><h4><span id="duo-mo-tai-guan-lian"><strong>多模态关联</strong></span></h4><ul><li><p>使用跨模态嵌入（如CLIP模型）将文本描述与图像关联。</p></li><li><p>分子结构图通过图神经网络（GNN）嵌入为向量，链接到化学品实体。</p></li><li><p>将图像识别结果（如SMILES）与文本抽取的化学品名对齐</p></li></ul><h3><span id="3-zhi-shi-tu-pu-jian-mo-v2"><strong>3. 知识图谱建模v2</strong></span></h3><h4><span id="ben-ti-she-ji-ontology"><strong>本体设计（Ontology）</strong></span></h4><ul><li><p><strong>核心实体</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;化学品核心实体（结构化存储）&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span>                      <span class="hljs-comment"># 唯一ID（CAS或内部ID）</span><br>    name: <span class="hljs-built_in">str</span>                    <span class="hljs-comment"># 中文名称</span><br>    en_name: <span class="hljs-built_in">str</span>                 <span class="hljs-comment"># 英文名称</span><br>    cas: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]           <span class="hljs-comment"># 允许CAS为空</span><br>    un: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]            <br>    molecular_formula: <span class="hljs-built_in">str</span>       <br>    physical_state: Enum         <br>    aliases: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]           <span class="hljs-comment"># 别名</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;危害类型详情（标准化存储）&quot;&quot;&quot;</span><br>    name: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 危害名称（如&quot;易燃液体&quot;）</span><br>    code: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># GHS代码（如&quot;H225&quot;）</span><br>    severity: <span class="hljs-built_in">int</span>           <span class="hljs-comment"># 危险等级（1-5）</span><br>    icon: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 图标路径</span><br></code></pre></td></tr></table></figure></li><li><p><strong>2. 动态证据链转为三元组：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvidenceTriple</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;多模态证据（动态存储）&quot;&quot;&quot;</span><br>    head: <span class="hljs-built_in">str</span>                   <span class="hljs-comment"># 关联的Chemical/Hazard等实体的ID</span><br>    relation: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 关系类型（自由定义）</span><br>    tail: <span class="hljs-built_in">str</span>                   <span class="hljs-comment"># 值或目标实体ID</span><br>    modality: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># text/image</span><br>    source: <span class="hljs-built_in">str</span>                 <span class="hljs-comment"># 数据来源（URL/文件名）</span><br>    confidence: <span class="hljs-built_in">float</span>           <span class="hljs-comment"># 置信度（0-1）</span><br>    timestamp: datetime         <span class="hljs-comment"># 记录时间</span><br></code></pre></td></tr></table></figure></li><li><p><strong>3.  关系的标准化设计：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RelationType</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    <span class="hljs-comment"># 对象属性（连接实体）</span><br>    HAS_HAZARD = <span class="hljs-string">&quot;hasHazard&quot;</span>            <span class="hljs-comment"># 化学品→危害</span><br>    HAS_COMPONENT = <span class="hljs-string">&quot;hasComponent&quot;</span>      <span class="hljs-comment"># 化学品→成分</span><br>    <span class="hljs-comment"># 数据属性（连接实体与字面量）</span><br>    HAS_MOLECULAR_WEIGHT = <span class="hljs-string">&quot;molWeight&quot;</span>  <span class="hljs-comment"># 化学品→分子量（浮点数）</span><br></code></pre></td></tr></table></figure></li></ul><h4><span id="guan-xi-fen-lei-ti-xi-she-ji"><strong>关系分类体系设计</strong></span></h4><p>针对化学品安全领域，采用<strong>混合分类法</strong>：结合领域标准（如GHS）与通用语义模型（如Schema.org）。</p><h5><span id="1-ling-yu-zhuan-yong-guan-xi">1. <strong>领域专用关系</strong></span></h5><table><thead><tr><th>关系类型</th><th>语义定义</th><th>示例</th></tr></thead><tbody><tr><td><code>hasHazard</code></td><td>化学品具有的危害类型</td><td>乙醇 <code>hasHazard</code> 易燃液体</td></tr><tr><td><code>hasFirstAid</code></td><td>危害对应的急救措施</td><td>腐蚀性 <code>hasFirstAid</code> 用水冲洗</td></tr><tr><td><code>regulatedUnder</code></td><td>受哪些法规监管</td><td>铅 <code>regulatedUnder</code> OSHA标准</td></tr></tbody></table><h5><span id="2-tong-yong-yu-yi-guan-xi">2. <strong>通用语义关系</strong></span></h5><table><thead><tr><th>关系类型</th><th>语义定义</th><th>示例</th></tr></thead><tbody><tr><td><code>hasPart</code></td><td>组成关系（整体→部分）</td><td>混合物 <code>hasPart</code> 苯</td></tr><tr><td><code>causes</code></td><td>因果链关系</td><td>泄漏 <code>causes</code> 环境污染</td></tr><tr><td><code>sameAs</code></td><td>实体对齐</td><td>CAS#64-17-5 <code>sameAs</code> 乙醇</td></tr></tbody></table><h5><span id="3-duo-mo-tai-guan-lian-guan-xi">3. <strong>多模态关联关系</strong></span></h5><table><thead><tr><th>关系类型</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td><code>depictedBy</code></td><td>实体与图像&#x2F;视频的关联</td><td>乙醇 <code>depictedBy</code> GHS02图标</td></tr><tr><td><code>describedIn</code></td><td>实体与文本片段的关联</td><td>爆炸性 <code>describedIn</code> MSDS第4节</td></tr></tbody></table><h4><span id="hun-he-cun-chu-ce-lue"><strong>混合存储策略</strong></span></h4><h5><span id="1-shu-ju-fen-pei-yuan-ze"><strong>1. 数据分配原则</strong></span></h5><table><thead><tr><th>数据类型</th><th>存储位置</th><th>示例</th></tr></thead><tbody><tr><td><strong>固定业务字段</strong></td><td>类结构（MongoDB&#x2F;Neo4j）</td><td><code>Chemical.physical_state</code></td></tr><tr><td><strong>多模态证据</strong></td><td>三元组（Neo4j）</td><td><code>&lt;乙醇, 标识图案, GHS02火焰图标&gt;</code></td></tr><tr><td><strong>大文件（光谱&#x2F;视频）</strong></td><td>对象存储（MinIO&#x2F;S3）</td><td>光谱图URL存入<code>EvidenceTriple.tail</code></td></tr></tbody></table><h5><span id="2-shu-ju-ku-mo-xing-shi-li"><strong>2. 数据库模型示例</strong></span></h5><p><strong>MongoDB文档（结构化部分）</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CHEM-64-17-5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;乙醇&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64-17-5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;boiling_point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">78.2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;density&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.789</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hazards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;H225&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;易燃液体&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>Neo4j图关系（三元组部分）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cypher">// 创建证据节点<br>CREATE (e:Evidence &#123;<br>  relation: &quot;消防措施&quot;,<br>  tail: &quot;使用干粉灭火器&quot;,<br>  modality: &quot;text&quot;,<br>  source: &quot;MSDS_第5节&quot;<br>&#125;)<br><br>// 关联到化学品<br>MATCH (c:Chemical &#123;id: &quot;CHEM-64-17-5&quot;&#125;), (e:Evidence)<br>MERGE (c)-[:HAS_EVIDENCE]-&gt;(e)<br></code></pre></td></tr></table></figure><h4><span id="guan-jian-gai-zao-dian"><strong>关键改造点</strong></span></h4><h5><span id="1-lei-jie-gou-diao-zheng"><strong>1. 类结构调整</strong></span></h5><ul><li><strong>移除易变字段</strong>：将<code>icon</code>、<code>spectral_data</code>等转为三元组：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 原类结构中的字段删除</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>:<br>    <span class="hljs-comment"># 删除 icon: str  </span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Property</span>:<br>    <span class="hljs-comment"># 删除 spectral_data: Dict</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><strong>增加ID引用</strong>：所有类添加唯一ID，用于关联三元组：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>:<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span> = Field(default_factory=<span class="hljs-keyword">lambda</span>: <span class="hljs-string">f&quot;CHEM-<span class="hljs-subst">&#123;uuid.uuid4()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h5><span id="2-xin-zeng-ying-she-fu-wu"><strong>2. 新增映射服务</strong></span></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvidenceMapper</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;动态字段与三元组的转换服务&quot;&quot;&quot;</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">map_icon_to_triple</span>(<span class="hljs-params">chemical_id: <span class="hljs-built_in">str</span>, icon_path: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">return</span> EvidenceTriple(<br>            head=chemical_id,<br>            relation=<span class="hljs-string">&quot;标识图案&quot;</span>,<br>            tail=icon_path,<br>            modality=<span class="hljs-string">&quot;image&quot;</span>,<br>            source=<span class="hljs-string">&quot;GHS图标库&quot;</span><br>        )<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">map_spectral_data</span>(<span class="hljs-params">chemical_id: <span class="hljs-built_in">str</span>, spectra_type: <span class="hljs-built_in">str</span>, url: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">return</span> EvidenceTriple(<br>            head=chemical_id,<br>            relation=<span class="hljs-string">f&quot;光谱数据_<span class="hljs-subst">&#123;spectra_type&#125;</span>&quot;</span>,<br>            tail=url,<br>            modality=<span class="hljs-string">&quot;image&quot;</span>,<br>            source=<span class="hljs-string">&quot;实验室检测&quot;</span><br>        )<br></code></pre></td></tr></table></figure><h4><span id="cha-xun-you-hua-fang-an"><strong>查询优化方案</strong></span></h4><h5><span id="1-hun-he-cha-xun-shi-li"><strong>1. 混合查询示例</strong></span></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_chemical_with_evidence</span>(<span class="hljs-params">cas: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-comment"># 1. 从MongoDB获取结构化数据</span><br>    chem = mongo_db.chemicals.find_one(&#123;<span class="hljs-string">&quot;cas&quot;</span>: cas&#125;)<br>    <br>    <span class="hljs-comment"># 2. 从Neo4j获取关联证据</span><br>    evidences = neo4j.run(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        MATCH (c:Chemical &#123;cas: $cas&#125;)-[:HAS_EVIDENCE]-&gt;(e)</span><br><span class="hljs-string">        RETURN e.relation AS relation, e.tail AS value, e.modality AS type</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>, cas=cas)<br>    <br>    <span class="hljs-comment"># 3. 按模态分类证据</span><br>    chem[<span class="hljs-string">&quot;evidences&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;text&quot;</span>: [e <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> evidences <span class="hljs-keyword">if</span> e[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;text&quot;</span>],<br>        <span class="hljs-string">&quot;image&quot;</span>: [e <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> evidences <span class="hljs-keyword">if</span> e[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image&quot;</span>]<br>    &#125;<br>    <span class="hljs-keyword">return</span> chem<br></code></pre></td></tr></table></figure><h4><span id="2-huan-cun-ce-lue"><strong>2. 缓存策略</strong></span></h4><ul><li><p><strong>结构化数据</strong>：Redis缓存<code>Chemical</code>对象（TTL 1小时）</p></li><li><p><strong>三元组数据</strong>：按需实时查询（高频关系可预加载）</p></li></ul><h3><span id="4-zhi-shi-chou-qu-yu-rong-he"><strong>4. 知识抽取与融合</strong></span></h3><h4><span id="wen-ben-chu-li"><strong>文本处理</strong></span></h4><ul><li><p><strong>NLP处理流水线</strong>：</p><ul><li><p>命名实体识别（NER）：提取化学品名、属性、危害术语（用BERT-CRF模型）。</p></li><li><p>关系抽取：基于规则或预训练模型（如REBEL）。</p></li></ul></li><li><p><strong>输出</strong>：</p><ul><li>标准化三元组（主体-关系-客体）存入图数据库</li></ul></li></ul><h4><span id="tu-xiang-chu-li"><strong>图像处理</strong></span></h4><ul><li><p><strong>cv处理流水线</strong>：</p><ul><li><p><strong>图标识别</strong>：YOLOv8检测GHS危险图标（如火焰、骷髅头）。</p></li><li><p><strong>分子结构解析</strong>：RDKit+GNN将结构图转为SMILES表达式。</p></li><li><p><strong>光谱匹配</strong>：ResNet提取特征，与数据库光谱向量相似度排序。</p></li></ul></li><li><p><strong>输出</strong>：</p><ul><li>图像特征向量（存入Milvus）、关联的化学品实体。</li></ul></li></ul><h3><span id="5-zhi-shi-cun-chu-yu-tui-li"><strong>5. 知识存储与推理</strong></span></h3><ul><li><p><strong>图数据库</strong>：Neo4j存储实体和关系。</p><ul><li>示例Cypher查询：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cypher">MATCH (c:Chemical &#123;name:&quot;硫酸&quot;&#125;)-[:has_hazard]-&gt;(h)<br>RETURN h.protection_measures<br></code></pre></td></tr></table></figure><ul><li><p><strong>向量数据库</strong>：FAISS存储分子结构、光谱嵌入向量，支持相似性搜索。</p></li><li><p><strong>推理引擎</strong>：</p><ul><li><p>基于规则的推理：IF <code>泄漏浓度 &gt;阈值</code> THEN <code>启动应急流程</code>。</p></li><li><p>图神经网络推理：预测未知化学品的危害性。</p></li></ul></li></ul><h3><span id="6-ying-yong-ceng-shi-xian"><strong>6. 应用层实现</strong></span></h3><ul><li><p><strong>多模态检索</strong>：</p><ul><li><p>输入：上传光谱图 → 返回匹配化学品及安全措施。</p></li><li><p>输入：”哪些化学品与氨气反应？” → 返回反应列表及视频演示。</p></li></ul></li><li><p><strong>风险要素自动抽取</strong>：</p><ul><li><p>输入：图片 + 高温的文字描述</p></li><li><p>输出：爆炸风险：避免热源</p></li></ul></li></ul><h3><span id="7-ji-zhu-zhan"><strong>7. 技术栈</strong></span></h3><table><thead><tr><th>模块</th><th>技术选型</th><th>用途</th></tr></thead><tbody><tr><td><strong>文本处理</strong></td><td>Spacy+BERT-CRF, REBEL关系抽取</td><td>化学品名&#x2F;风险要素抽取</td></tr><tr><td><strong>图像处理</strong></td><td>YOLOv8（图标检测）, RDKit+GNN（分子图转SMILES）, CLIP（跨模态匹配）</td><td>图像解析与关联</td></tr><tr><td><strong>知识存储</strong></td><td>Neo4j（图谱）, FAISS（向量）, MongoDB（非结构化数据）</td><td>多模态数据存储</td></tr><tr><td><strong>后端服务</strong></td><td>FastAPI（Python）, GraphQL（图谱查询）, Kafka（实时数据流）</td><td>提供统一接口</td></tr><tr><td><strong>前端可视化</strong></td><td>React + Cytoscape.js + Ketcher + Three.js（3D分子展示）</td><td>交互式知识探索</td></tr><tr><td><strong>部署运维</strong></td><td>Docker + Kubernetes, Prometheus（监控）, Nginx（负载均衡）</td><td>高可用部署</td></tr></tbody></table><h3><span id="8-tiao-zhan-yu-jie-jue-fang-an"><strong>8. 挑战与解决方案</strong></span></h3><ul><li><p><strong>数据异构性</strong>：定义统一JSON-LD格式映射多模态数据。</p></li><li><p><strong>实时性</strong>：使用Kafka流处理传感器数据。</p></li><li><p><strong>可解释性</strong>：生成基于子图的解释（如泄漏处理步骤的推理路径）。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>知识图谱</category>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Selenium动态网页爬取技术详解</title>
    <link href="/2025/07/31/%E7%88%AC%E8%99%AB/2025-07-30-Selenium%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E5%8F%96%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/07/31/%E7%88%AC%E8%99%AB/2025-07-30-Selenium%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E5%8F%96%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在现代Web开发中，越来越多的网站采用动态加载技术，传统爬虫难以获取完整数据。本文将全面介绍如何使用Selenium进行动态网页爬取，并通过一个化学数据爬取的实战案例展示完整流程。</p></blockquote><h2><span id="ling-wei-shi-me-yao-shi-yong-selenium">零、为什么要使用Selenium</span></h2><p>博主在进行爬虫实战时遇到了不少障碍，知己知彼方能克敌制胜。首先介绍一些常见的反爬手段：</p><ol><li><p><strong>AJAX异步加载</strong>：数据通过多次请求异步加载</p></li><li><p><strong>JavaScript渲染</strong>：数据被特殊格式隐藏在源码中</p></li><li><p><strong>请求头检测</strong>：对User-Agent和动态字段的验证</p></li><li><p><strong>浏览器特征检测</strong>：通过DOM指纹识别爬虫</p></li><li><p><strong>IP检测</strong>：基于IP访问频率的封锁机制</p></li><li><p><strong>验证系统</strong>：登录验证和人机验证</p></li></ol><p>面对这种情况，简单的设置代理、添加Cookie、设置爬取频率等手段已经捉襟见肘。即使可以解决以上问题，也会出现case by case，也就是面对每个网站都需要重构自己爬虫系统的窘境，那有没有一个相对来说更简单高效的解决方案呢？我认为Selenium通过模拟真实浏览器行为，提供了一套相对通用的解决方案。</p><h2><span id="yi-selenium-ji-chu-gai-nian">一、Selenium基础概念</span></h2><h3><span id="1-shi-me-shi-selenium">1. 什么是Selenium</span></h3><p>Selenium是一个自动化测试工具，但也被广泛用于网页爬取，特别是针对：</p><ul><li><p>需要JavaScript渲染的页面</p></li><li><p>基于AJAX动态加载的内容</p></li><li><p>需要交互操作才能获取的数据</p></li></ul><h3><span id="2-he-xin-zu-jian">2. 核心组件</span></h3><table><thead><tr><th>组件</th><th>功能说明</th><th>典型应用场景</th></tr></thead><tbody><tr><td>WebDriver</td><td>浏览器自动化接口</td><td>支持Chrome、Firefox等主流浏览器</td></tr><tr><td>WebElement</td><td>DOM元素对象</td><td>页面元素定位和操作</td></tr><tr><td>Wait机制</td><td>动态加载等待策略</td><td>处理AJAX内容加载</td></tr><tr><td>Action Chains</td><td>复杂用户操作模拟</td><td>拖拽、鼠标悬停等交互</td></tr></tbody></table><h2><span id="er-dong-tai-pa-qu-guan-jian-ji-zhu">二、动态爬取关键技术</span></h2><p>这里博主不对每个技术进长篇大论，只给出每种技术的使用场景及提示词。</p><h3><span id="he-xin-cao-zuo-lei">核心操作类</span></h3><h4><span id="1-yuan-su-ding-wei">1. 元素定位</span></h4><p><strong>Prompt模板</strong>：<br>“用Python的Selenium编写代码，使用{定位方式}定位以下元素：</p><ul><li><p>元素特征描述：{可见文本&#x2F;ID&#x2F;Class&#x2F;XPath路径等}</p></li><li><p>特殊要求：{如需要等待&#x2F;处理iframe&#x2F;排除隐藏元素等}<br>  返回完整的定位代码示例，包含异常处理”</p></li></ul><p><strong>示例</strong>：<br>“用Python的Selenium编写代码，使用CSS选择器定位class包含’product-item’且不包含’out-of-stock’的div元素，要求先等待元素可见，返回完整代码”</p><p><em>注：常用定位方式有：id定位、css选择器、XPath、正则表达式匹配</em></p><h4><span id="2-dong-tai-deng-dai">2. 动态等待</span></h4><p><strong>Prompt模板</strong>：<br>“为Selenium编写一个显式等待函数，要求：</p><ul><li><p>等待条件：{元素出现&#x2F;可见&#x2F;可点击&#x2F;文本包含&#x2F;元素消失等}</p></li><li><p>超时时间：{秒数}</p></li><li><p>容错机制：{超时后操作}<br>  输出带注释的Python代码”</p></li></ul><p><strong>示例</strong>：<br>“为Selenium编写一个显式等待函数，等待ID为’ajax-content’的div内出现至少3个子元素，超时10秒，失败后自动截图，返回完整代码”</p><hr><h3><span id="fan-fan-pa-ce-lue-lei">反反爬策略类</span></h3><h4><span id="3-zhi-wen-wei-zhuang">3. 指纹伪装</span></h4><p><strong>Prompt模板</strong>：<br>“生成完整的Selenium浏览器配置代码，实现：</p><ol><li><p>隐藏自动化特征（如webdriver属性）</p></li><li><p>随机User-Agent轮换</p></li><li><p>禁用WebRTC泄漏<br> 包含异常处理和注释说明”</p></li></ol><h4><span id="4-yan-zheng-ma-rao-guo">4. 验证码绕过</span></h4><p><strong>Prompt模板</strong>：<br>“设计一个处理Selenium中常见验证码的方案，要求：</p><ul><li><p>识别类型：{图片验证码&#x2F;滑块&#x2F;reCAPTCHA等}</p></li><li><p>工具选择：{第三方API&#x2F;本地OCR&#x2F;手动介入等}<br>  输出分步骤的Python实现逻辑”</p></li></ul><p><strong>示例</strong>：<br>“设计一个通过2Captcha服务自动解决Selenium中reCAPTCHA v2的方案，包含：</p><ol><li><p>检测验证码出现</p></li><li><p>调用API流程</p></li><li><p>结果自动填充<br> 返回带错误重试机制的代码”</p></li></ol><p><em>注：对于实时性要求不高的爬虫项目，可以考虑调大wait_time的时间，手动进行验证</em></p><hr><h3><span id="xing-neng-you-hua-lei">性能优化类</span></h3><h4><span id="5-bing-xing-chu-li">5. 并行处理</span></h4><p><strong>Prompt模板</strong>：<br>“用Python实现多线程Selenium爬虫，要求：</p><ul><li><p>线程数：{N}</p></li><li><p>任务分配：{URL队列&#x2F;动态任务分发}</p></li><li><p>数据合并：{去重&#x2F;统一存储}<br>  避免资源竞争和浏览器实例冲突的完整方案”</p></li></ul><h4><span id="6-huan-cun-li-yong">6. 缓存利用</span></h4><p><strong>Prompt模板</strong>：<br>“编写Selenium缓存管理工具，实现：</p><ul><li><p>自动复用已有登录状态</p></li><li><p>页面静态资源缓存</p></li><li><p>支持强制刷新条件<br>  输出配置代码和使用示例”</p></li></ul><hr><h3><span id="gao-ji-gong-neng-lei">高级功能类</span></h3><h4><span id="7-wang-luo-jian-kong">7. 网络监控</span></h4><p><strong>Prompt模板</strong>：<br>“通过Selenium CDP协议监控所有XHR请求，要求：</p><ul><li><p>捕获请求URL和响应体</p></li><li><p>过滤条件：{域名&#x2F;请求类型等}</p></li><li><p>异常请求重试机制<br>  返回可直接运行的代码片段”</p></li></ul><h4><span id="8-yi-dong-duan-mo-ni">8. 移动端模拟</span></h4><p><strong>Prompt模板</strong>：<br>“生成移动端设备模拟的Selenium配置，包含：</p><ul><li><p>设备型号：{iPhone 14&#x2F;Galaxy S22等}</p></li><li><p>触摸事件模拟</p></li><li><p>网络节流设置<br>  输出完整设备参数列表和初始化代码”</p></li></ul><hr><h3><span id="diao-shi-yu-yi-chang-lei">调试与异常类</span></h3><h4><span id="9-zhi-neng-diao-shi">9. 智能调试</span></h4><p><strong>Prompt模板</strong>：<br>“为以下Selenium报错提供解决方案：</p><ul><li><p>错误信息：{完整错误日志}</p></li><li><p>上下文：{操作步骤&#x2F;目标网站}<br>  要求给出：</p></li></ul><ol><li><p>错误原因分析</p></li><li><p>三种可能的解决方式</p></li><li><p>推荐方案代码实现”</p></li></ol><p><strong>示例</strong>：<br>“为Selenium报错’ElementClickInterceptedException’提供解决方案，发生在点击浮动广告后的页面元素时，要求给出三种处理方式并比较优缺点”</p><hr><h3><span id="fu-he-chang-jing-mo-ban">复合场景模板</span></h3><h4><span id="10-wan-zheng-pa-chong-she-ji">10. 完整爬虫设计</span></h4><p><strong>Prompt模板</strong>：<br>“设计一个完整的Selenium爬虫项目，需求：</p><ul><li><p>目标网站：{网站类型&#x2F;示例URL}</p></li><li><p>数据要求：{采集字段&#x2F;频率&#x2F;存储格式}</p></li><li><p>特殊挑战：{登录&#x2F;验证码&#x2F;动态加载等}<br>  输出：</p></li></ul><ol><li><p>技术选型说明</p></li><li><p>核心代码架构</p></li><li><p>异常处理流程图”</p></li></ol><hr><h3><span id="shi-yong-jian-yi">使用建议：</span></h3><ol><li><p><strong>精确描述</strong>：包含具体参数（超时时间、元素特征等）</p></li><li><p><strong>分步请求</strong>：复杂场景拆解为多个Prompt</p></li><li><p><strong>示例参考</strong>：提供类似代码片段加速生成</p></li><li><p><strong>限制条件</strong>：明确要求（如”不用第三方库”）</p></li></ol><p><strong>效果最好的Prompt结构</strong>：<br>“以{编程语言}编写{功能描述}代码，要求{具体需求}，避免{常见问题}，输出格式：{代码&#x2F;流程图&#x2F;步骤说明}，示例参考：{类似代码片段}”</p><p>这些Prompt经过实际测试，能有效引导LLM生成可运行的Selenium代码解决方案。</p><h2><span id="san-shi-zhan-an-li-hua-xue-shu-ju-pa-qu">三、实战案例：化学数据爬取</span></h2><h3><span id="1-ye-mian-fen-xi-ji-qiao">1. 页面分析技巧</span></h3><p><strong>开发者工具使用</strong>：</p><ol><li><p>F12打开开发者工具</p></li><li><p>Network面板监控XHR请求</p></li><li><p>Elements面板分析DOM结构</p></li></ol><h3><span id="2-wan-zheng-pa-qu-liu-cheng">2. 完整爬取流程</span></h3><p>首先设置一个 CONFIG 进行参数配置，下面对具体参数进行简单介绍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 配置参数  </span><br>CONFIG = &#123;  <br>    <span class="hljs-string">&#x27;login_url&#x27;</span>: <span class="hljs-string">&#x27;https://example.com/login/,  </span><br><span class="hljs-string">    &#x27;</span>base_url<span class="hljs-string">&#x27;: &#x27;</span>https://example.com/<span class="hljs-string">&#x27;,  </span><br><span class="hljs-string">    &#x27;</span>username<span class="hljs-string">&#x27;: &#x27;</span>stackecho<span class="hljs-string">&#x27;,  </span><br><span class="hljs-string">    &#x27;</span>password<span class="hljs-string">&#x27;: &#x27;</span><span class="hljs-number">123456</span><span class="hljs-string">&#x27;,  </span><br><span class="hljs-string">    &#x27;</span>output_di<span class="hljs-string">r&#x27;: &#x27;</span>chemical_data<span class="hljs-string">&#x27;,  </span><br><span class="hljs-string">    &#x27;</span>start_page<span class="hljs-string">&#x27;: 1,  </span><br><span class="hljs-string">    &#x27;</span>end_page<span class="hljs-string">&#x27;: 201,  </span><br><span class="hljs-string">    &#x27;</span>wait_time<span class="hljs-string">&#x27;: 3  </span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><ol><li><p>“login_url”, ‘username”, “password” 三个字段分别为登陆界面的URL，用户名和密码。</p></li><li><p>“base_url”, “start_page”, “end_page” 三个字段是对要爬取的网页URL的拆解。</p></li><li><p>“output_dir” 字段用于指明爬取内容的存储位置</p></li><li><p>“wait_time” 字段用于控制爬虫的爬取频率</p></li></ol><p>这里对前两个部分进行一些额外的补充：</p><ol><li><p>如果要爬取的网站没有登陆要求，可以省去这个步骤；</p></li><li><p>对于连续的多个页面，网站URL通常会以 ‘<a href="https://example.com/?pageNum=1">https://example.com/?pageNum=1</a>‘ 的形式组织，这时可以通过遍历最后的数字得到所有需要爬取的网站地址。</p></li><li><p>但若网站不以这种形式指定URL，或者你需要继续访问当前页面中提供的URL，则可以只保留 “base_url” 字段，通过点击事件，得到下一个要爬取的URL。</p></li></ol><hr><p>接下来定义一个 ChemicalScraper 类控制整个爬虫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver  <br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By  <br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> webdriver_manager.chrome <span class="hljs-keyword">import</span> ChromeDriverManager<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChemicalScraper</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-variable language_">self</span>.driver = <span class="hljs-variable language_">self</span>.init_driver()  <br>        <span class="hljs-variable language_">self</span>.wait = WebDriverWait(<span class="hljs-variable language_">self</span>.driver, <span class="hljs-number">30</span>)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_driver</span>(<span class="hljs-params">self</span>):  <br>        service = Service(ChromeDriverManager().install())  <br>        options = webdriver.ChromeOptions()  <br>        options.add_argument(<span class="hljs-string">&#x27;--disable-gpu&#x27;</span>)  <br>        <span class="hljs-keyword">return</span> webdriver.Chrome(service=service, options=options)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在登录...&quot;</span>)  <br>        <span class="hljs-variable language_">self</span>.driver.get(CONFIG[<span class="hljs-string">&#x27;login_url&#x27;</span>])  <br>        <span class="hljs-keyword">try</span>:  <br>            username = <span class="hljs-variable language_">self</span>.driver.find_element(<br>            By.CSS_SELECTOR, <span class="hljs-string">&#x27;input[type=&quot;text&quot;]&#x27;</span>)  <br>            password = <span class="hljs-variable language_">self</span>.driver.find_element(<br>            By.CSS_SELECTOR, <span class="hljs-string">&#x27;input[type=&quot;password&quot;]&#x27;</span>)  <br>            username.send_keys(CONFIG[<span class="hljs-string">&#x27;username&#x27;</span>])  <br>            password.send_keys(CONFIG[<span class="hljs-string">&#x27;password&#x27;</span>])  <br>            <span class="hljs-variable language_">self</span>.driver.find_element(By.CSS_SELECTOR, <span class="hljs-string">&#x27;button.btn&#x27;</span>).click()  <br>            <span class="hljs-variable language_">self</span>.wait.until(EC.url_contains(<span class="hljs-string">&#x27;pageNum&#x27;</span>))  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录成功&quot;</span>)  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;登录失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>            <span class="hljs-variable language_">self</span>.save_screenshot(<span class="hljs-string">&#x27;login_error.png&#x27;</span>)  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>博主在这里模拟了Chrome浏览器，可以使用options对浏览器的一些行为进行配置，最后拿到driver并通过它进行后续的模拟操作。</p><p>登陆函数的行为如下，首先通过driver.get()方法进入登陆页地址，然后通过css选择器拿到用户名和密码的输入框，再将CONFIG中设置好的用户名与密码通过send_keys()方法填入，最后用css选择器得到登陆的点击按钮，使用click()点击完成登陆。</p><p>最后需要使用wait机制和expected_conditions（以下简称EC）来判断是否登陆成功，简单来说就是进行等待，直到url中包含了登陆成功后跳转的页面的元素。</p><hr><p>万事具备，终于可以进行数据的爬取了，以下就是爬取逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_page</span>(<span class="hljs-params">self, page_num</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;爬取单个页面&quot;&quot;&quot;</span>  <br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;CONFIG[<span class="hljs-string">&#x27;base_url&#x27;</span>]&#125;</span>?pageNum=<span class="hljs-subst">&#123;page_num&#125;</span>&quot;</span>  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n正在爬取第 <span class="hljs-subst">&#123;page_num&#125;</span> 页...&quot;</span>)  <br>    <span class="hljs-variable language_">self</span>.driver.get(url)  <br>  <br>    <span class="hljs-keyword">try</span>:  <br>        <span class="hljs-variable language_">self</span>.wait.until(EC.presence_of_element_located(<br>        (By.CSS_SELECTOR, <span class="hljs-string">&#x27;.relative&#x27;</span>)))  <br>        time.sleep(<span class="hljs-number">2</span>)  <br>  <br>        elements = <span class="hljs-variable language_">self</span>.driver.find_elements(  <br>            By.CSS_SELECTOR, <br>            <span class="hljs-string">&#x27;.relative .whitespace-pre-wrap.overflow-hidden&#x27;</span>)  <br>        raw_items = [&#123;  <br>            <span class="hljs-string">&quot;page&quot;</span>: page_num,  <br>            <span class="hljs-string">&quot;item_id&quot;</span>: <span class="hljs-string">f&quot;item_<span class="hljs-subst">&#123;idx + <span class="hljs-number">1</span>&#125;</span>&quot;</span>,  <br>            <span class="hljs-string">&quot;content&quot;</span>: elem.text.strip()  <br>        &#125; <span class="hljs-keyword">for</span> idx, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(elements)]  <br>  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.process_page_data(raw_items)  <br>  <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;爬取第 <span class="hljs-subst">&#123;page_num&#125;</span> 页时出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>        <span class="hljs-variable language_">self</span>.save_screenshot(<span class="hljs-string">f&#x27;page_<span class="hljs-subst">&#123;page_num&#125;</span>_error.png&#x27;</span>)  <br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><p>先将传入的page_num与CONFIG里配置的base_url拼接得到目标页面的地址，再使用get()方法进入页面。由于网页的元素是动态加载的，使用上面提到的wait机制等待其加载完毕，同时为了以防万一，我们在加载完毕后令爬虫休眠2秒。</p><p>面对加载完成的页面，我们可以使用元素定位策略定位需要爬取的元素并进行爬取了。这里使用了pipeline的思想，先将数据爬取下来，再传入process_page_data()函数进行处理，最后将处理后的数据保存下来。这样，面对不同的爬取需求，只需要在对应的板块中进行修改替换，而不用担心牵一发而动全身。</p><hr><p>在正式讲解数据处理流程前，先来说说博主的一次错误实践：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 错误实践</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_raw_data</span>(<span class="hljs-params">raw_items</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;处理原始数据，转换为结构化格式&quot;&quot;&quot;</span>  <br>    structured_data = []  <br>  <br>    <span class="hljs-comment"># 每5个条目为一组（跳过序号，取后面4个）  </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(raw_items), <span class="hljs-number">5</span>):  <br>        group = raw_items[i:i + <span class="hljs-number">5</span>]  <br>  <br>        <span class="hljs-comment"># 确保有完整的4个数据项（跳过序号）  </span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(group) &gt;= <span class="hljs-number">5</span>:  <span class="hljs-comment"># 1个序号 + 4个数据  </span><br>            <span class="hljs-keyword">try</span>:  <br>                <span class="hljs-comment"># 跳过序号（group[0]），取后面4个  </span><br>                cas = group[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">if</span> group[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;N/A&quot;</span>  <br>                en_name = group[<span class="hljs-number">2</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">if</span> group[<span class="hljs-number">2</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;N/A&quot;</span>  <br>                cn_name = group[<span class="hljs-number">3</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">if</span> group[<span class="hljs-number">3</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;N/A&quot;</span>  <br>                un = group[<span class="hljs-number">4</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">if</span> group[<span class="hljs-number">4</span>][<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;N/A&quot;</span>  <br>  <br>                structured_data.append(&#123;  <br>                    <span class="hljs-string">&quot;cas&quot;</span>: cas,  <br>                    <span class="hljs-string">&quot;en_name&quot;</span>: en_name,  <br>                    <span class="hljs-string">&quot;cn_name&quot;</span>: cn_name,  <br>                    <span class="hljs-string">&quot;un&quot;</span>: un  <br>                &#125;)  <br>            <span class="hljs-keyword">except</span> IndexError:  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;不完整的数据组: <span class="hljs-subst">&#123;group&#125;</span>&quot;</span>)  <br>                <span class="hljs-keyword">continue</span>  <br>  <br>    <span class="hljs-keyword">return</span> structured_data<br></code></pre></td></tr></table></figure><p>这段数据处理的逻辑是，虽然经过简单匹配class属性的scrape_page()会传入一些无用的页面元素，但我要爬取的是结构化的数据，每条数据中都应该包含[条目号，cas编号，英文物质名，中文物质名，un编号]。因此我只需要判断遍历的数据中是否包含以上5个数据项，并去掉条目号，将剩下的数据存储下来，交由存储函数进行存储。</p><p>但这里存在一个致命的漏洞，存在没有cas编号或un编号的物质，上面的逻辑会导致漏检和key-value错配。在检查爬取的数据后，博主意识到了这个问题，并对函数进行了修改，得到了下面的v2版本并完成了此次爬虫的数据处理任务。</p><hr><p>下面介绍博主的第二版页面数据处理流程，大家可以用作参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-meta">@staticmethod  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">identify_field</span>(<span class="hljs-params">content</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;智能识别字段类型&quot;&quot;&quot;</span>  <br>    content = <span class="hljs-built_in">str</span>(content).strip()  <br>  <br>    <span class="hljs-comment"># 识别UN号（4位数字）  </span><br>    <span class="hljs-keyword">if</span> re.fullmatch(<span class="hljs-string">r&#x27;^\d&#123;4&#125;$&#x27;</span>, content):  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;un&#x27;</span>  <br>  <br>    <span class="hljs-comment"># 识别CAS号（标准格式：NNNNN-NN-N）  </span><br>    <span class="hljs-keyword">if</span> re.fullmatch(<span class="hljs-string">r&#x27;^\d&#123;1,7&#125;-\d&#123;2&#125;-\d$&#x27;</span>, content):  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;cas&#x27;</span>  <br>  <br>    <span class="hljs-comment"># 识别中文（包含中文字符）  </span><br>    <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&#x27;[\u4e00-\u9fff]&#x27;</span>, content):  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;cn_name&#x27;</span>  <br>  <br>    <span class="hljs-comment"># 识别英文（排除纯数字）  </span><br>    <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^[a-zA-Z].*&#x27;</span>, content):  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;en_name&#x27;</span>  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_page_data</span>(<span class="hljs-params">self, raw_items</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;处理页面数据v2&quot;&quot;&quot;</span>  <br>    structured_data = []  <br>    i = <span class="hljs-number">0</span>  <br>  <br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(raw_items):  <br>        <span class="hljs-comment"># 跳过序号项  </span><br>        <span class="hljs-keyword">if</span> raw_items[i][<span class="hljs-string">&#x27;content&#x27;</span>].strip().isdigit():  <br>            i += <span class="hljs-number">1</span>  <br>            <span class="hljs-keyword">continue</span>  <br>  <br>        record = &#123;<span class="hljs-string">&quot;cas&quot;</span>: <span class="hljs-string">&quot;NA&quot;</span>, <span class="hljs-string">&quot;en_name&quot;</span>: <span class="hljs-string">&quot;NA&quot;</span>, <span class="hljs-string">&quot;cn_name&quot;</span>: <span class="hljs-string">&quot;NA&quot;</span>, <span class="hljs-string">&quot;un&quot;</span>: <span class="hljs-string">&quot;NA&quot;</span>&#125;  <br>        used_indices = <span class="hljs-built_in">set</span>()  <br>  <br>        <span class="hljs-comment"># 第一轮：精确匹配  </span><br>        <span class="hljs-keyword">for</span> offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-number">4</span>, <span class="hljs-built_in">len</span>(raw_items) - i)):  <br>            <span class="hljs-keyword">if</span> i + offset <span class="hljs-keyword">in</span> used_indices:  <br>                <span class="hljs-keyword">continue</span>  <br>  <br>            content = raw_items[i + offset][<span class="hljs-string">&#x27;content&#x27;</span>].strip()  <br>            field_type = <span class="hljs-variable language_">self</span>.identify_field(content)  <br>  <br>            <span class="hljs-keyword">if</span> field_type <span class="hljs-keyword">and</span> record[field_type] == <span class="hljs-string">&quot;NA&quot;</span>:  <br>                record[field_type] = content  <br>                used_indices.add(i + offset)  <br>  <br>        <span class="hljs-comment"># 第二轮：处理剩余未识别内容  </span><br>        remaining = [j <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-built_in">min</span>(i + <span class="hljs-number">4</span>, <span class="hljs-built_in">len</span>(raw_items))) <br>        <span class="hljs-keyword">if</span> j <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> used_indices]  <br>        <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> remaining:  <br>            content = raw_items[idx][<span class="hljs-string">&#x27;content&#x27;</span>].strip()  <br>  <br>            <span class="hljs-comment"># 按优先级尝试填充空缺字段  </span><br>            <span class="hljs-keyword">if</span> record[<span class="hljs-string">&#x27;cas&#x27;</span>] == <span class="hljs-string">&quot;NA&quot;</span> <span class="hljs-keyword">and</span> (<span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> content <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(content) &gt; <span class="hljs-number">6</span>):  <br>                record[<span class="hljs-string">&#x27;cas&#x27;</span>] = content  <br>            <span class="hljs-keyword">elif</span> record[<span class="hljs-string">&#x27;un&#x27;</span>] == <span class="hljs-string">&quot;NA&quot;</span> <span class="hljs-keyword">and</span> content.isdigit():  <br>                record[<span class="hljs-string">&#x27;un&#x27;</span>] = content  <br>            <span class="hljs-keyword">elif</span> record[<span class="hljs-string">&#x27;cn_name&#x27;</span>] == <span class="hljs-string">&quot;NA&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<br>            <span class="hljs-string">r&#x27;^[a-zA-Z0-9\s\-\.]+$&#x27;</span>, content):  <br>                record[<span class="hljs-string">&#x27;cn_name&#x27;</span>] = content  <br>            <span class="hljs-keyword">elif</span> record[<span class="hljs-string">&#x27;en_name&#x27;</span>] == <span class="hljs-string">&quot;NA&quot;</span>:  <br>                record[<span class="hljs-string">&#x27;en_name&#x27;</span>] = content  <br>  <br>        <span class="hljs-comment"># 验证至少有两个有效字段  </span><br>        valid_fields = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> record.values() <span class="hljs-keyword">if</span> v != <span class="hljs-string">&quot;NA&quot;</span>)  <br>        <span class="hljs-keyword">if</span> valid_fields &gt;= <span class="hljs-number">2</span>:  <br>            structured_data.append(record)  <br>            i += <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(used_indices))  <span class="hljs-comment"># 至少前进1步  </span><br>        <span class="hljs-keyword">else</span>:  <br>            i += <span class="hljs-number">1</span>  <br>  <br>    <span class="hljs-keyword">return</span> structured_data<br></code></pre></td></tr></table></figure><p>首先定义了一个identify_field()函数，用于识别处理数据项的字段类型。</p><p>然后是数据处理函数process_page_data()，这里选择先声明一个空的record而不是在处理数据的过程中往structured_data里添加记录，是为了在之后的两阶段匹配中可以根据key值匹配数据，可以有效避免前次处理的残留数据影响当前记录。</p><p>接下来是一个双阶段的处理，先进行精确匹配，将准确识别到的内容填入record中，而后对剩余的未匹配内容（如果存在）进行启发式匹配。</p><p>最后对record中的字段进行校验，这是基于以下逻辑：即使存在一个化学品既没有cas号，也没有un号，但其至少有中英文名称。</p><hr><p>接下来我们要将处理好的数据存储起来，这里为方便起见，直接使用json存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">self, data, filename=<span class="hljs-string">&#x27;chemicals.json&#x27;</span></span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;保存数据&quot;&quot;&quot;</span>  <br>    os.makedirs(CONFIG[<span class="hljs-string">&#x27;output_dir&#x27;</span>], exist_ok=<span class="hljs-literal">True</span>)  <br>    filepath = os.path.join(CONFIG[<span class="hljs-string">&#x27;output_dir&#x27;</span>], filename)  <br>  <br>    <span class="hljs-keyword">try</span>:  <br>        existing_data = []  <br>        <span class="hljs-keyword">if</span> os.path.exists(filepath):  <br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:  <br>                existing_data = json.load(f)  <br>  <br>        combined_data = existing_data + data  <br>  <br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:  <br>            json.dump(combined_data, f, ensure_ascii=<span class="hljs-literal">False</span>, indent=<span class="hljs-number">2</span>)  <br>  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;已保存 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(data)&#125;</span> 条记录到 <span class="hljs-subst">&#123;filepath&#125;</span> (总计 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(combined_data)&#125;</span> 条)&quot;</span>)  <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;保存数据时出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><hr><p>最后，定义一个run函数调用上面的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;运行爬虫&quot;&quot;&quot;</span>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.login():  <br>        <span class="hljs-keyword">return</span>  <br>  <br>    all_data = []  <br>    <span class="hljs-keyword">try</span>:  <br>        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(CONFIG[<span class="hljs-string">&#x27;start_page&#x27;</span>], CONFIG[<span class="hljs-string">&#x27;end_page&#x27;</span>]+<span class="hljs-number">1</span>):  <br>            <span class="hljs-keyword">try</span>:  <br>                page_data = <span class="hljs-variable language_">self</span>.scrape_page(page)  <br>                <span class="hljs-keyword">if</span> page_data:  <br>                    all_data.extend(page_data)  <br>                    <span class="hljs-variable language_">self</span>.save_data(page_data)  <br>  <br>                time.sleep(CONFIG[<span class="hljs-string">&#x27;wait_time&#x27;</span>])  <br>  <br>            <span class="hljs-keyword">except</span> KeyboardInterrupt:  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n用户中断，正在保存数据...&quot;</span>)  <br>                <span class="hljs-keyword">break</span>  <br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;处理第 <span class="hljs-subst">&#123;page&#125;</span> 页时发生错误: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)  <br>                <span class="hljs-keyword">continue</span>  <br>  <br>    <span class="hljs-keyword">finally</span>:  <br>        <span class="hljs-variable language_">self</span>.save_data(all_data, <span class="hljs-string">&quot;final_chemicals.json&quot;</span>)  <br>        <span class="hljs-variable language_">self</span>.driver.quit()  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;爬取完成&quot;</span>)<br></code></pre></td></tr></table></figure><hr><p>对了，别忘了写上main函数让爬虫跑起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:  <br>    scraper = ChemicalScraper()  <br>    scraper.run()<br></code></pre></td></tr></table></figure><h2><span id="si-pa-chong-kai-fa-de-xin-lu-li-cheng-yu-jing-yan-zong-jie">四、爬虫开发的心路历程与经验总结</span></h2><p>回顾我的爬虫开发历程，可以说是一段不断突破技术瓶颈的成长之旅。最初我选择使用Golang直接发起HTTP请求进行页面解析，这种方案虽然性能优异，但在面对现代网站复杂的反爬机制时却显得力不从心。即使我建立了完善的日志系统，面对动态渲染、行为验证等高级反爬手段时，仍然难以精准定位问题根源。</p><p>随后我转向了Scrapy框架，这个选择确实解决了不少基础问题。Scrapy的强大中间件系统和内置的Shell调试工具确实提高了开发效率。但不得不承认，在可视化调试和动态交互方面，Scrapy的工作流始终无法满足我对开发体验的追求——特别是在处理JavaScript重度依赖的页面时，调试过程往往变得异常繁琐。</p><p>最终选择Selenium可谓是一个转折点。这个决定不仅解决了前两种方案的核心痛点，还带来了意想不到的收获：</p><ol><li><p><strong>所见即所得的调试体验</strong>：可以直观地观察每个操作步骤的页面变化</p></li><li><p><strong>真实用户行为模拟</strong>：有效绕过大多数基于行为分析的防御机制</p></li><li><p><strong>灵活的异常处理</strong>：结合截图功能实现精准的问题定位</p></li></ol><p>但Selenium的采用也并非一帆风顺。在实际项目中，我仍然需要解决网站设置的多重障碍：</p><ul><li><p>动态加载元素的精准等待策略</p></li><li><p>浮动广告层对目标元素的遮挡问题</p></li><li><p>滑块验证码的识别方案</p></li></ul><p>这些挑战的解决过程，让我深刻体会到爬虫开发不仅需要技术实力，更需要解决问题的耐心和创造力。每个网站都有其独特的”性格”，只有真正理解它的行为模式，才能设计出最合适的爬取方案。</p><p><strong>给开发者的建议</strong>：</p><ol><li><p>不要执着于单一技术方案，根据目标网站特性灵活选择工具组合</p></li><li><p>建立完善的调试体系（日志+截图+断点续爬）</p></li><li><p>保持对反爬机制的持续学习，及时更新技术储备</p></li><li><p>始终遵守网络道德规范，合理控制爬取频率</p></li></ol><p>爬虫开发就像一场永无止境的技术探险，每一次突破瓶颈都意味着能力的提升。希望我的经验分享能为同行者提供有价值的参考，也欢迎大家一起探讨更优的解决方案。</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS选择器与XPath</title>
    <link href="/2025/07/30/%E7%88%AC%E8%99%AB/2025-07-30-CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8EXPath/"/>
    <url>/2025/07/30/%E7%88%AC%E8%99%AB/2025-07-30-CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8EXPath/</url>
    
    <content type="html"><![CDATA[<blockquote><p>博主最近在构建一个用于危险化学品检测的多模态知识图谱，由于没有开源的数据集，遂只能自行进行数据的爬取。而想要进行网络资源的抓取，对于文档元素的定位是绕不开的话题。正则表达式由于写法过于冗杂，不在博主的考虑之中，接下来主要为大家介绍CSS选择器与XPath两种方法。</p></blockquote><h3><span id="css-xuan-ze-qi">CSS选择器</span></h3><p>CSS是层叠样式表的简称，很多的网页都使用了这个技术，因此，要用于HTML文档的样式应用CSS选择器，也被广泛用于Web抓取和前端测试中。</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>知识图谱遇见多模态学习：一项全面调查</title>
    <link href="/2025/07/29/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB/2025-07-29-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E9%81%87%E8%A7%81%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%B8%80%E9%A1%B9%E5%85%A8%E9%9D%A2%E8%B0%83%E6%9F%A5/"/>
    <url>/2025/07/29/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB/2025-07-29-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E9%81%87%E8%A7%81%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%B8%80%E9%A1%B9%E5%85%A8%E9%9D%A2%E8%B0%83%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1><span id="zhi-shi-tu-pu-yu-jian-duo-mo-tai-xue-xi-yi-xiang-quan-mian-diao-cha">知识图谱遇见多模态学习：一项全面调查</span></h1><p>根据摘要，本篇综述主要聚焦两个方面：知识图谱驱动多模态学习以及多模态知识图谱本身。文章对知识图谱和多模态知识图谱给出了定义以及相应的构建方法。文章关注于两个主要的任务类别：知识图谱驱动的多模态学习任务，如图像分类和视觉问答；以及多模态知识图谱本身的任务，如多模态知识图谱补全和实体对齐。对于这些任务，文章中会给出定义、评估的基准测试和一些额外的见解。最后，文章会讨论当前的挑战和新兴的趋势。</p><h3><span id="jing-dian-zhi-shi-tu-pu-de-gou-jian">经典知识图谱的构建</span></h3><p>这里将经典知识图谱分为两类：基于实体的知识图谱与富文本的知识图谱</p><h4><span id="1-ji-yu-shi-ti-de-zhi-shi-tu-pu">1）基于实体的知识图谱：</span></h4><p>在构建这种知识图谱时，本体和数据都遵循严格的标准。图谱中的节点通常与现实世界中的实体一一对应。它们通常基于手动定义的本体构建，提供了清晰的语义，实体类型和关系之间的歧义和重叠最小。构建这些图谱通常涉及从结构化数据源（如关系数据库）处理实体和关系。而从各种结构化数据源整合知识需要解决三种异构性：</p><ul><li>模式异构性：不同的数据源可能以不同的方式表示相同的实体类型和关系</li><li>实体异构性：不同的源名称可能描述相同的现实世界实体</li><li>值异构性：不同的源可能为相同的实体提供不同的或过时的属性值</li></ul><h4><span id="2-fu-wen-ben-de-zhi-shi-tu-pu">2）富文本的知识图谱</span></h4><p>这种知识图谱侧重于从大量文本数据中提取知识，以构建包含丰富文本描述和语义关系的知识图谱。但它在提取清晰明确的实体方面面临挑战，这使得它们更接近于二分图而非传统的连通图。也正应如此，这类图谱通常能容忍更高的模糊性，通过将节点表示为自由文本而非明确定义的实体，使其得以适配于产品和百科全书等值与类之间的语义区分本就模糊领域。</p><h3><span id="duo-mo-tai-zhi-shi-tu-pu-de-gou-jian">多模态知识图谱的构建</span></h3><p>这里主要介绍两种多模态知识图谱的构建范式：利用知识图谱中的符号标注图像与将知识图谱符号与图像进行关联</p><h4><span id="1-li-yong-zhi-shi-tu-pu-zhong-de-fu-hao-biao-zhu-tu-xiang">1）利用知识图谱中的符号标注图像</span></h4><p>第一种范式着重提取视觉实体、关系和事件以动态创建知识图谱，但在表示长尾多模态知识时面临挑战，原因在于常见实体的重复描绘。有监督方法因现有标签范围有限而加剧了问题，且系统需大量预处理工作，存在可扩展性挑战。</p><h4><span id="2-jiang-zhi-shi-tu-pu-fu-hao-yu-tu-xiang-jin-xing-guan-lian">2）将知识图谱符号与图像进行关联</span></h4><p>第二种范式上当前多数 MMKG 所使用的，其将知识图谱符号与图像关联，包括实体、概念和关系关联。</p><p>接下来的部分叙述了多模态知识图谱的演进过程，感兴趣的可以移步原文进行阅读。</p>]]></content>
    
    
    <categories>
      
      <category>知识图谱</category>
      
      <category>论文精读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前言：我与6.S081的两次相遇</title>
    <link href="/2025/07/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/MIT%206.s081%E4%BF%AE%E7%82%BC%E7%AC%94%E8%AE%B0/2025-07-28-%E5%89%8D%E8%A8%80%EF%BC%9A%E6%88%91%E4%B8%8E6.S081%E7%9A%84%E4%B8%A4%E6%AC%A1%E7%9B%B8%E9%81%87/"/>
    <url>/2025/07/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/MIT%206.s081%E4%BF%AE%E7%82%BC%E7%AC%94%E8%AE%B0/2025-07-28-%E5%89%8D%E8%A8%80%EF%BC%9A%E6%88%91%E4%B8%8E6.S081%E7%9A%84%E4%B8%A4%E6%AC%A1%E7%9B%B8%E9%81%87/</url>
    
    <content type="html"><![CDATA[<h2><span id="chu-shi-yi-chang-chong-man-yi-wai-de-xie-hou">初识：一场充满意外的邂逅</span></h2><p>2023年的夏天，考研失利的我决定重新夯实计算机基础。在搜索”最好的操作系统课程”时，MIT 6.S081这个”网红课”毫无悬念地出现在所有推荐列表中。但那时的我还停留在”三无”状态：</p><ul><li><p>无科学上网能力</p></li><li><p>无Git实践经验</p></li><li><p>无GitHub使用认知</p></li></ul><p>幸运的是课程官网可以直接访问，让我得以绕过第一道门槛。按照指南，我在VMware上安装了Ubuntu，开始了第一次操作系统探索之旅。</p><h2><span id="ji-zhu-li-xian-ji">技术历险记</span></h2><h3><span id="wang-luo-kun-jing-yu-po-ju">网络困境与破局</span></h3><p>课程所需的工具链下载成了第一个拦路虎。感谢国内技术社区的分享精神，Gitee上的镜像仓库让我跳过了这个障碍。</p><h3><span id="kai-fa-huan-jing-you-hua">开发环境优化</span></h3><p>原生vim糟糕的操作效率让我很快转向了VSCode远程开发方案。通过配置Remote-SSH插件，终于建立了舒适的学习环境。</p><h3><span id="xue-xi-qu-xian-tu-po">学习曲线突破</span></h3><p>作为系统调用领域的新手，前几个实验的难度曲线令人却步。我的破局方法包括：</p><ol><li><p>精读课程讲义（重点标注系统调用机制）</p></li><li><p>交叉参考《C专家编程》理解复杂声明</p></li><li><p>通过《C和指针》掌握底层内存操作</p></li><li><p>通过题解理解题目背后的原理</p></li></ol><h2><span id="hei-tian-e-shi-jian">黑天鹅事件</span></h2><p>那个看似平常的下午，开发环境突然崩溃的连锁反应：</p><ol><li>VSCode SSH连接异常 → 2. VMware虚拟机启动失败 → 3. 三次重启尝试无果 → 4. 实验环境完全丢失</li></ol><p>这次事故最终促使我转向了南大jyy的操作系统课程，但也埋下了重学的种子。</p><h2><span id="zai-chu-fa-quan-xin-de-zheng-cheng">再出发：全新的征程</span></h2><p>2025年暑假，带着这些升级装备重新启程：</p><ul><li><p>🛠️ 完善的开发工具链（科学上网以及mac os开发环境）</p></li><li><p>🧠 更完整的知识体系（包括编译原理和计算机体系结构）</p></li><li><p>📝 高效的输出系统（Hexo博客+Obsidian知识库）</p></li></ul><p>这次学习我将重点关注：</p><ol><li><p>实验环境的灾备方案</p></li><li><p>关键知识点的可视化记录</p></li><li><p>问题解决过程的完整归档</p></li></ol><blockquote><p>“The only real failure is the failure to learn from failure.” — Alan Kay</p></blockquote><p>欢迎各位同行者通过Issues或邮件交流学习心得，让我们在系统编程的深海中共同探索。</p><p>ps：博主可能暂时跳车15445了</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>MIT 6.s081修炼笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建新思路：借助大模型提示词开启高效之旅</title>
    <link href="/2025/07/27/%E6%9D%82%E8%B0%88/2025-07-27-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%96%B0%E6%80%9D%E8%B7%AF%EF%BC%9A%E5%80%9F%E5%8A%A9%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%BC%80%E5%90%AF%E9%AB%98%E6%95%88%E5%88%9B%E4%BD%9C%E4%B9%8B%E6%97%85/"/>
    <url>/2025/07/27/%E6%9D%82%E8%B0%88/2025-07-27-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%96%B0%E6%80%9D%E8%B7%AF%EF%BC%9A%E5%80%9F%E5%8A%A9%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%BC%80%E5%90%AF%E9%AB%98%E6%95%88%E5%88%9B%E4%BD%9C%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>使用 Hexo 框架在 GitHub Pages 上搭建个人博客站点，并通过 NameSilo 购买域名，托管在 Cloudflare 上，将域名重定向到 GitHub Pages 站点。同时，选择 Next或Fliud 作为网站主题，并使用 Obsidian 作为博客管理和撰写工具，打造高效舒适的工作流。</p></blockquote><p>在这个信息过载的时代，我原本计划撰写一篇详尽的Hexo博客搭建教程，直到一篇知乎专栏点醒了我——当目录都让人望而生畏时，这样的内容真的还有价值吗？于是，我决定提供更高效的解决方案：通过精心设计的提示词，让AI成为你的技术顾问，带你快速完成从零到一的博客搭建。</p><h4><span id="wei-shi-me-xu-yao-ti-shi-ci-ce-lue">为什么需要提示词策略？</span></h4><p>你可能会问：直接询问GPT不就好了？但实践过的人都知道，零散的提问会导致：</p><ol><li><p>反复踩坑消耗对话轮数</p></li><li><p>上下文断裂需要不断总结</p></li><li><p>解决方案缺乏系统性</p></li></ol><p>通过这套结构化提示词体系，你可以：</p><ul><li><p>获得完整的技术路径</p></li><li><p>预判并规避常见陷阱</p></li><li><p>建立高效的工作流闭环</p></li></ul><p>接下来，我将具体操作总结为智能搭建五部曲：<br><em>0. 基础准备（科学上网方案）</em><br><em>1. Hexo核心搭建</em><br><em>2. 域名系统优化（可选）</em><br><em>3. 主题深度定制</em><br><em>4. Obsidian内容管理</em></p><p><strong>0. 基础准备（科学上网方案）</strong><br>既然使用了github，那“科学上网”就是逃不开的话题，那么你可以使用以下的提示词：<br>“我在中国大陆，需要稳定访问GitHub进行博客搭建，请推荐三种可行的网络解决方案，要求：</p><ol><li>包含具体配置步骤</li><li>注明各方案优缺点</li><li>提供验证连接成功的方法”</li></ol><p><strong>1. Hexo核心搭建</strong><br>要想使用hexo，你还需要下载Node.js、npm、Git并配置ssh连接，因为使用HTTP连接会出现很多网络问题，你可以参考以下的提示词：<br>“作为前端新手，我需要通过Hexo+GitHub Pages搭建博客，请：</p><ol><li>分步指导Node.js&#x2F;npm&#x2F;Git环境配置</li><li>提供SSH密钥生成与GitHub配置的完整命令</li><li>包含验证各环节成功的检测命令</li><li>解释.gitignore的最佳实践配置”</li></ol><p><strong>2. 域名系统优化（可选）</strong><br>如果想要购买私有域名并部署，可以参考以下提示词（注意将example.com替换成自己心仪的域名哦）：<br>“计划在NameSilo购买example.com域名并通过Cloudflare托管，要求：</p><ol><li>域名解析的完整DNS配置流程</li><li>HTTPS强制跳转设置</li><li>GitHub Pages的CNAME配置</li><li>常见SSL证书问题的解决方案”</li></ol><p><strong>3. 主题深度定制</strong><br>你的博客往往需要一个主题才能更好看，以及进行个性化定制：<br>“为Hexo选择Fluid主题后，我需要：</p><ol><li>修改主题色为#2C3E50</li><li>添加豆瓣阅读插件</li><li>实现目录锚点跳转</li><li>优化移动端显示效果<br>请给出具体配置代码及解释”<br>博客主题的个性化定制是个无底洞，这里建议先进行简单的配置，之后一边理解一边慢慢添加修改。</li></ol><p><strong>4. Obsidian内容管理</strong><br>这应该是除了配置私有域名外最容易踩坑的地方了，下面的提示词也只能作为参考，各位可以根据自身情况进行删改，当然我更建议以obsidian与hexo作为关键词进行检索，找一个合适的模版，针对该模版进行提问与配置。<br>“需要建立Obsidian+Hexo的写作系统：</p><ol><li>文件树自动映射为博客分类</li><li>模板包含Front-matter自动填充</li><li>一键部署脚本集成</li><li>图片资源自动化处理方案<br>请给出Markdown模板示例和Vault配置建议”</li></ol><p>好了，这个时候你大概率已经将你的博客部署完成，当然，遇到问题也不必惊慌，将报错复制下来丢给你的大模型老师就行了。下面我来介绍一下这个项目的更新维护方法：<br>1.预览你的博客：<br>hexo c &amp;&amp; hexo g &amp;&amp; hexo s<br>2.部署你的博客:<br>hexo c &amp;&amp; hexo g &amp;&amp; hexo d<br>技术说明（命令可简写为首字母）：</p><ul><li><p><code>clean</code>：清除<code>public</code>和<code>db.json</code>缓存</p></li><li><p><code>generate</code>：生成静态HTML到public目录</p></li><li><p><code>server</code>：启动本地4000端口服务</p></li><li><p><code>deploy</code>：自动推送至GitHub Pages</p></li></ul><h4><span id="bo-ke-xie-zuo-de-xian-dai-yi-yi">博客写作的现代意义</span></h4><p>在这个AI重构知识获取方式的时代，博客的价值正在转向：</p><ul><li><p>🧠 个人知识晶体化工具</p></li><li><p>🔄 费曼学习法的实践场域</p></li><li><p>🎨 数字身份的可视化名片</p></li></ul><p>正如编程从记忆语法转向问题求解，博客搭建也应当从技术实现转向价值创造。现在，你需要的不是又一篇教程，而是立即创建你的<code>first_post.md</code>——因为最好的学习，永远发生在你按下发布按钮的那一刻。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
