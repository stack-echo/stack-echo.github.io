<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StackEcho</title>
  
  <subtitle>栈上回声</subtitle>
  <link href="https://stackecho.blog/atom.xml" rel="self"/>
  
  <link href="https://stackecho.blog/"/>
  <updated>2025-08-01T11:32:41.986Z</updated>
  <id>https://stackecho.blog/</id>
  
  <author>
    <name>Xu Yuyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pytest-测试框架</title>
    <link href="https://stackecho.blog/2025/08/01/python/2025-08-01-pytest-%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://stackecho.blog/2025/08/01/python/2025-08-01-pytest-%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2025-08-01T10:20:01.000Z</published>
    <updated>2025-08-01T11:32:41.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>pytest 是 Python 领域使用最广泛、功能最丰富的 <strong>第三方</strong> 单元测试框架（Unit Test Framework）。它秉承“让测试变得更简单”的理念，语法简洁、插件生态庞大，几乎已经成为 Python 事实上的测试标准。</p></blockquote><h2><span id="yi-an-zhuang">一、安装</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pytest<br></code></pre></td></tr></table></figure><h2><span id="er-zui-xiao-ke-yun-xing-shi-li">二、最小可运行示例</span></h2><p>这里以博主的demo作为例子</p><h3><span id="1-jian-li-mu-lu-jie-gou">1. 建立目录结构</span></h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix">demo<span class="hljs-symbol">/</span><br>├── core<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 核心领域模型</span><br>│   └── entities.py            <span class="hljs-comment"># Chemical/Hazard等核心类定义</span><br>│<br>└── tests<span class="hljs-symbol">/</span>                     <span class="hljs-comment"># 测试套件</span><br>    └── test_entities.py.      <span class="hljs-comment"># entities.py测试代码</span><br></code></pre></td></tr></table></figure><h3><span id="2-bei-ce-dai-ma-core-entities-py">2. 被测代码 <code>core/entities.py</code></span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel, validator<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;化学品核心实体&quot;&quot;&quot;</span>  <br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span>  <br>    name: <span class="hljs-built_in">str</span><br>    en_name: <span class="hljs-built_in">str</span><br>    cas: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br>    un: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>  <br>  <br><span class="hljs-meta">    @validator(<span class="hljs-params"><span class="hljs-string">&#x27;cas&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_cas</span>(<span class="hljs-params">cls, v</span>):<br>        <span class="hljs-keyword">if</span> v <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^\d&#123;2,7&#125;-\d&#123;2&#125;-\d$&#x27;</span>, v):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Invalid CAS number format&quot;</span>)<br>        <span class="hljs-keyword">return</span> v <br></code></pre></td></tr></table></figure><h3><span id="3-ce-shi-dai-ma-tests-test-entities-py">3. 测试代码 <code>tests/test_entities.py</code></span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> core.entities <span class="hljs-keyword">import</span> Chemical<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestChemical</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_valid_cas</span>(<span class="hljs-params">self</span>):<br>        chem = Chemical(<br>            <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CHEM001&quot;</span>,<br>            name=<span class="hljs-string">&quot;水&quot;</span>,<br>            en_name=<span class="hljs-string">&quot;Water&quot;</span>,<br>            cas=<span class="hljs-string">&quot;7732-18-5&quot;</span>,  <span class="hljs-comment"># 有效CAS</span><br>        )<br>        <span class="hljs-keyword">assert</span> chem.cas == <span class="hljs-string">&quot;7732-18-5&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_invalid_cas</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">with</span> pytest.raises(ValidationError):<br>            Chemical(<br>                <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;CHEM002&quot;</span>,<br>                name=<span class="hljs-string">&quot;测试&quot;</span>,<br>                en_name=<span class="hljs-string">&quot;test&quot;</span>,<br>                cas=<span class="hljs-string">&quot;abc-de-f&quot;</span>,  <span class="hljs-comment"># 无效格式</span><br>            )<br></code></pre></td></tr></table></figure><h3><span id="4-yun-xing-ce-shi">4. 运行测试</span></h3><p>在项目根目录执行：<code>pytest</code>, pytest 会递归查找以 <code>test_*.py</code> 或 <code>*_test.py</code> 命名的文件，执行其中以 <code>test_</code> 开头的函数&#x2F;类&#x2F;方法。</p><h2><span id="san-he-xin-te-xing-su-lan">三、核心特性速览</span></h2><table><thead><tr><th>功能</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><strong>断言语句</strong></td><td>仅使用原生 <code>assert</code></td><td><code>assert func() == 42</code></td></tr><tr><td><strong>自动发现</strong></td><td>默认规则：文件&#x2F;函数&#x2F;类以 <code>test_</code> 开头</td><td>无需手动注册</td></tr><tr><td><strong>夹具（fixture）</strong></td><td>测试前置&#x2F;后置逻辑复用</td><td><code>@pytest.fixture</code></td></tr><tr><td><strong>参数化</strong></td><td>一条测试跑多组输入</td><td><code>@pytest.mark.parametrize</code></td></tr><tr><td><strong>标记（mark）</strong></td><td>给测试打标签，选择性运行</td><td><code>@pytest.mark.slow</code></td></tr><tr><td><strong>插件体系</strong></td><td>1000+ 插件，如 <code>pytest-cov</code>, <code>pytest-xdist</code></td><td><code>pip install pytest-cov</code></td></tr><tr><td><strong>失败重跑</strong></td><td>通过插件实现</td><td><code>pip install pytest-rerunfailures</code></td></tr></tbody></table><h2><span id="si-fixture-ke-fu-yong-de-ce-shi-zi-yuan">四、fixture：可复用的测试资源</span></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;pytest 是 Python 领域使用最广泛、功能最丰富的 &lt;strong&gt;第三方&lt;/strong&gt; 单元测试框架（Unit Test Framework）。它秉承“让测试变得更简单”的理念，语法简洁、插件生态庞大，几乎已经成为 Python 事</summary>
      
    
    
    
    <category term="python" scheme="https://stackecho.blog/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>pydantic-数据验证和解析</title>
    <link href="https://stackecho.blog/2025/08/01/python/2025-08-01-pydantic-%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E5%92%8C%E8%A7%A3%E6%9E%90/"/>
    <id>https://stackecho.blog/2025/08/01/python/2025-08-01-pydantic-%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E5%92%8C%E8%A7%A3%E6%9E%90/</id>
    <published>2025-08-01T10:16:14.000Z</published>
    <updated>2025-08-01T11:32:38.587Z</updated>
    
    
    
    
    <category term="python" scheme="https://stackecho.blog/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>构建一个简易的demo验证mmkg设计方案的可行性</title>
    <link href="https://stackecho.blog/2025/08/01/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-08-01-%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84demo%E9%AA%8C%E8%AF%81mmkg%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7/"/>
    <id>https://stackecho.blog/2025/08/01/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-08-01-%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84demo%E9%AA%8C%E8%AF%81mmkg%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7/</id>
    <published>2025-08-01T08:50:14.000Z</published>
    <updated>2025-08-01T11:32:36.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为验证多模态知识图谱本体设计是否合理，数据链路是否通畅，博主决定设计一个简易的demo进行验证，并以此指导后续完整图谱的设计。</p></blockquote><p>下面先介绍chemical_mmkg_demo-v1的组织结构</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix">chemical_mmkg_demo<span class="hljs-symbol">/</span><br>├── core<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 核心领域模型</span><br>│   ├── __init__.py<br>│   ├── entities.py            <span class="hljs-comment"># Chemical/Hazard等核心类定义</span><br>│   ├── relations.py           <span class="hljs-comment"># RelationType枚举及关系验证</span><br>│   └── exceptions.py          <span class="hljs-comment"># 自定义异常类</span><br>│<br>├── data<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 数据相关</span><br>│   └── sample_data<span class="hljs-symbol">/</span>           <span class="hljs-comment"># 测试用YAML/JSON数据</span><br>│<br>├── services<span class="hljs-symbol">/</span>                  <span class="hljs-comment"># 业务逻辑</span><br>│   └── graph_service.py       <span class="hljs-comment"># 图谱构建/查询服务</span><br>│<br>├── tests<span class="hljs-symbol">/</span>                     <span class="hljs-comment"># 测试套件</span><br>│   └── unit<span class="hljs-symbol">/</span><br>│       └── test_entities.py<br>│<br>└── demo<span class="hljs-symbol">/</span>                      <span class="hljs-comment"># 演示用例</span><br>    ├── setup_sample_graph.py  <span class="hljs-comment"># 初始化测试数据</span><br>    └── query_examples.py      <span class="hljs-comment"># 典型查询示例</span><br></code></pre></td></tr></table></figure><p>代码清单：</p><h3><span id="1-he-xin-ling-yu-mo-xing">1. 核心领域模型</span></h3><h4><span id="core-entities-py"><code>core/entities.py</code></span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum  <br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>  <br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel, Field, field_validator  <br><span class="hljs-keyword">import</span> re  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhysicalState</span>(<span class="hljs-title class_ inherited__">Enum</span>):  <br>    SOLID = <span class="hljs-number">1</span>  <br>    LIQUID = <span class="hljs-number">2</span>  <br>    GAS = <span class="hljs-number">3</span>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;化学品核心实体&quot;&quot;&quot;</span>  <br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span> = Field(..., min_length=<span class="hljs-number">3</span>, description=<span class="hljs-string">&quot;唯一标识符（CAS或内部ID）&quot;</span>)  <br>    name: <span class="hljs-built_in">str</span> = Field(..., max_length=<span class="hljs-number">100</span>, description=<span class="hljs-string">&quot;中文名称&quot;</span>)  <br>    en_name: <span class="hljs-built_in">str</span> = Field(..., max_length=<span class="hljs-number">100</span>, description=<span class="hljs-string">&quot;英文名称&quot;</span>)  <br>    cas: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = Field(<span class="hljs-literal">None</span>, description=<span class="hljs-string">&quot;CAS登记号&quot;</span>)  <br>    un: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = Field(<span class="hljs-literal">None</span>, pattern=<span class="hljs-string">r&#x27;^UN\d&#123;4&#125;$&#x27;</span>, description=<span class="hljs-string">&quot;UN编号&quot;</span>)  <br>    molecular_formula: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;分子式&quot;</span>)  <br>    physical_state: PhysicalState = Field(..., description=<span class="hljs-string">&quot;物理状态&quot;</span>)  <br>    <span class="hljs-comment"># aliases: List[str] = Field(default_factory=list, description=&quot;别名列表&quot;)  </span><br>  <br><span class="hljs-meta">    @field_validator(<span class="hljs-params"><span class="hljs-string">&#x27;cas&#x27;</span></span>)  </span><br><span class="hljs-meta">    @classmethod  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_cas</span>(<span class="hljs-params">cls, v: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]:  <br>        <span class="hljs-keyword">if</span> v <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:  <br>            <span class="hljs-keyword">return</span> v  <br>  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.fullmatch(<span class="hljs-string">r&#x27;^\d&#123;2,7&#125;-\d&#123;2&#125;-\d$&#x27;</span>, v):  <br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Invalid CAS number format&quot;</span>)  <br>  <br>        parts = v.split(<span class="hljs-string">&#x27;-&#x27;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts[<span class="hljs-number">0</span>]) &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(parts[<span class="hljs-number">0</span>]) &gt; <span class="hljs-number">7</span>:  <br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;CAS first segment must be 2-7 digits&quot;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts[<span class="hljs-number">1</span>]) != <span class="hljs-number">2</span>:  <br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;CAS second segment must be 2 digits&quot;</span>)  <br>  <br>        <span class="hljs-keyword">return</span> v  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;危害特性实体&quot;&quot;&quot;</span>  <br>    name: <span class="hljs-built_in">str</span> = Field(..., description=<span class="hljs-string">&quot;危害名称&quot;</span>)  <br>    code: <span class="hljs-built_in">str</span> = Field(..., pattern=<span class="hljs-string">r&#x27;^(GHS|H)\d+$&#x27;</span>, description=<span class="hljs-string">&quot;GHS/H代码&quot;</span>)  <br>    severity: <span class="hljs-built_in">int</span> = Field(<span class="hljs-number">1</span>, ge=<span class="hljs-number">1</span>, le=<span class="hljs-number">5</span>, description=<span class="hljs-string">&quot;危险等级&quot;</span>)  <br>    icon: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = Field(<span class="hljs-literal">None</span>, description=<span class="hljs-string">&quot;图标路径&quot;</span>)  <br>  <br><span class="hljs-meta">    @field_validator(<span class="hljs-params"><span class="hljs-string">&#x27;severity&#x27;</span></span>)  </span><br><span class="hljs-meta">    @classmethod  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_severity</span>(<span class="hljs-params">cls, v: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:  <br>        <span class="hljs-keyword">if</span> v &gt; <span class="hljs-number">3</span>:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;警告：高风险等级 <span class="hljs-subst">&#123;v&#125;</span>！需要特殊处理&quot;</span>)  <br>        <span class="hljs-keyword">return</span> v<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;为验证多模态知识图谱本体设计是否合理，数据链路是否通畅，博主决定设计一个简易的demo进行验证，并以此指导后续完整图谱的设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面先介绍chemical_mmkg_demo-v1的组织结构&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    <category term="知识图谱" scheme="https://stackecho.blog/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    <category term="项目" scheme="https://stackecho.blog/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>用于危险化学品检测的多模态知识图谱构建方案</title>
    <link href="https://stackecho.blog/2025/07/31/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-07-31-%E7%94%A8%E4%BA%8E%E5%8D%B1%E9%99%A9%E5%8C%96%E5%AD%A6%E5%93%81%E6%A3%80%E6%B5%8B%E7%9A%84%E5%A4%9A%E6%A8%A1%E6%80%81%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%96%B9%E6%A1%88/"/>
    <id>https://stackecho.blog/2025/07/31/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/2025-07-31-%E7%94%A8%E4%BA%8E%E5%8D%B1%E9%99%A9%E5%8C%96%E5%AD%A6%E5%93%81%E6%A3%80%E6%B5%8B%E7%9A%84%E5%A4%9A%E6%A8%A1%E6%80%81%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%96%B9%E6%A1%88/</id>
    <published>2025-07-31T12:19:28.000Z</published>
    <updated>2025-08-01T04:34:38.798Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1-xu-qiu-fen-xi-yu-chang-jing-ding-yi"><strong>1. 需求分析与场景定义</strong></span></h3><ul><li><p><strong>目标</strong>：实现危险化学品的快速识别、属性查询、危害评估、应急处理推荐。</p></li><li><p><strong>应用场景</strong>：化工生产、仓储管理、应急响应、环境监测等。</p></li><li><p><strong>核心功能</strong>：</p><ul><li><p>化学品物理&#x2F;化学属性查询（如毒性、燃点、反应性）。</p></li><li><p>多模态检索（通过文本、分子结构图、光谱图像等查询）。</p></li><li><p>危害预警与应急处理建议。</p></li></ul></li></ul><hr><h3><span id="2-shu-ju-lai-yuan-yu-duo-mo-tai-shu-ju-zheng-he"><strong>2. 数据来源与多模态数据整合</strong></span></h3><h4><span id="jie-gou-hua-shu-ju"><strong>结构化数据</strong></span></h4><ul><li><p><strong>权威数据库</strong>：</p><ul><li><p>PubChem、ChemSpider（化学属性、CAS号）。</p></li><li><p>OSHA危险化学品数据库（安全规范）。</p></li><li><p>MSDS查询。</p></li></ul></li><li><p><strong>本地数据</strong>：企业化学品库存表、安全数据表（SDS&#x2F;MSDS）。</p></li></ul><h4><span id="fei-jie-gou-hua-shu-ju"><strong>非结构化数据</strong></span></h4><ul><li><p><strong>文本</strong>：科研论文（PubMed）、安全手册、应急预案。</p></li><li><p><strong>图像</strong>：化学品标签、光谱图（红外&#x2F;Raman）、分子结构图。</p></li></ul><h3><span id="3-zhi-shi-tu-pu-jian-mo-v1"><strong>3. 知识图谱建模v1</strong></span></h3><h4><span id="ben-ti-she-ji-ontology"><strong>本体设计（Ontology）</strong></span></h4><ul><li><p><strong>核心实体</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;化学品实体（核心标识信息）&quot;&quot;&quot;</span><br>    attributes:<br>        - name: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 中文名称（如&quot;硫酸&quot;）</span><br>        - en_name: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 英文名称（如&quot;Sulfuric acid&quot;）</span><br>        - CAS: <span class="hljs-built_in">str</span>                   <span class="hljs-comment"># CAS号（唯一标识，必须非空）</span><br>        - UN: <span class="hljs-built_in">str</span>                    <span class="hljs-comment"># UN编号（如&quot;1830&quot;）  </span><br>        - molecular_formula: <span class="hljs-built_in">str</span>     <span class="hljs-comment"># 分子式（如&quot;H2SO4&quot;）</span><br>        - physical_state: Enum      <span class="hljs-comment"># 物理状态（SOLID/LIQUID/GAS）</span><br>        - aliases: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]         <span class="hljs-comment"># 别名（如&quot;电池酸&quot;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;危害类型（GHS标准）&quot;&quot;&quot;</span><br>    attributes:<br>        - code: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># GHS代码（如&quot;H314&quot;）</span><br>        - <span class="hljs-built_in">type</span>: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 分类（如&quot;皮肤腐蚀/刺激&quot;）</span><br>        - severity: Enum             <span class="hljs-comment"># 危险等级（1-5级，对应GHS分类）</span><br>        - icon: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 图标文件名（如&quot;corrosive.png&quot;）</span><br>        - signal_word: Enum          <span class="hljs-comment"># 信号词（DANGER/WARNING）</span><br>        - hazard_statements: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 危险说明（如&quot;造成严重皮肤灼伤&quot;）</span><br>        - precautionary_statements: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 防范说明（如&quot;穿戴防护手套&quot;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Property</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;物理化学属性（动态补充）&quot;&quot;&quot;</span><br>    attributes:<br>        - appearance: <span class="hljs-built_in">str</span>            <span class="hljs-comment"># 外观（如&quot;无色油状液体&quot;）</span><br>        - color: <span class="hljs-built_in">str</span>                 <span class="hljs-comment"># 颜色（如&quot;淡黄色&quot;）</span><br>        - odor: <span class="hljs-built_in">str</span>                  <span class="hljs-comment"># 气味（如&quot;刺激性氨味&quot;）</span><br>        - melting_point: <span class="hljs-built_in">float</span>       <span class="hljs-comment"># 熔点（℃）</span><br>        - boiling_point: <span class="hljs-built_in">float</span>       <span class="hljs-comment"># 沸点（℃）</span><br>        - flash_point: <span class="hljs-built_in">float</span>         <span class="hljs-comment"># 闪点（℃）</span><br>        - solubility: <span class="hljs-built_in">str</span>            <span class="hljs-comment"># 溶解度（如&quot;易溶于水&quot;）</span><br>        - density: <span class="hljs-built_in">float</span>             <span class="hljs-comment"># 密度（g/cm³）</span><br>        - spectral_data: <span class="hljs-type">Dict</span>        <span class="hljs-comment"># 光谱数据（键值对，如&#123;&quot;IR&quot;: &quot;url1&quot;, &quot;Raman&quot;: &quot;url2&quot;&#125;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmergencyMeasure</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;应急措施（完整流程）&quot;&quot;&quot;</span><br>    attributes:<br>        - spill_response: <span class="hljs-built_in">str</span>        <span class="hljs-comment"># 泄漏处理（如&quot;用砂土吸附&quot;）</span><br>        - first_aid: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>]  <span class="hljs-comment"># 急救措施（按暴露途径分类）:</span><br>                                     <span class="hljs-comment">#   - eye_contact: &quot;立即用清水冲洗15分钟&quot;</span><br>                                     - skin_contact: <span class="hljs-string">&quot;脱去污染衣物，用肥皂水冲洗&quot;</span><br>                                     - inhalation: <span class="hljs-string">&quot;转移至空气新鲜处&quot;</span><br>        - fire_fighting: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]   <span class="hljs-comment"># 消防措施（如&quot;使用干粉灭火器&quot;）</span><br>        - special_protection: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 特殊防护（如&quot;需自给式呼吸器&quot;）</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StorageRequirement</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;存储与操作要求&quot;&quot;&quot;</span><br>    attributes:<br>        - storage_condition: <span class="hljs-built_in">str</span>     <span class="hljs-comment"># 存储条件（如&quot;阴凉通风，远离氧化剂&quot;）</span><br>        - incompatible_materials: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] <span class="hljs-comment"># 禁忌物质（CAS号列表）</span><br>        - handling_precautions: <span class="hljs-built_in">str</span>   <span class="hljs-comment"># 操作注意事项（如&quot;使用防爆工具&quot;）</span><br><br><span class="hljs-comment"># 可选</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RegulatoryInfo</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;法规合规信息&quot;&quot;&quot;</span><br>    attributes:<br>        - regulatory_standard: <span class="hljs-built_in">str</span>   <span class="hljs-comment"># 法规标准（如&quot;OSHA 1910.1200&quot;）</span><br>        - exposure_limits: <span class="hljs-type">Dict</span>       <span class="hljs-comment"># 暴露限值（如&#123;&quot;TWA&quot;: &quot;5 ppm&quot;&#125;）</span><br>        - transport_rules: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]  <span class="hljs-comment"># 运输规则（如&quot;UN编号1277, 3类危险品&quot;）</span><br></code></pre></td></tr></table></figure><p><strong>关系</strong>：</p></li><li><p><code>Chemical -[has_property]-&gt; PhysicalProperty</code></p></li><li><p><code>Chemical -[has_hazard]-&gt; Hazard</code></p></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cypher">// 创建完整的化学品节点及关系<br>CREATE (c:Chemical &#123;<br>    name: &quot;硫酸&quot;,<br>    en_name: &quot;Sulfuric acid&quot;,<br>    CAS: &quot;7664-93-9&quot;,<br>    UN: &quot;1830&quot;<br>&#125;)<br>CREATE (h:Hazard &#123;<br>    code: &quot;H314&quot;,<br>    type: &quot;皮肤腐蚀/刺激&quot;,<br>    severity: 1,<br>    icon: &quot;corrosive.png&quot;<br>&#125;)<br>CREATE (p:Property &#123;<br>    boiling_point: 337.0,<br>    density: 1.84<br>&#125;)<br>CREATE (e:EmergencyMeasure &#123;<br>    fire_fighting: [&quot;使用干粉灭火器&quot;, &quot;禁止用水&quot;]<br>&#125;)<br>CREATE (s:StorageRequirement &#123;<br>    storage_condition: &quot;与碱类分开存放&quot;<br>&#125;)<br>MERGE (c)-[:HAS_HAZARD]-&gt;(h)<br>MERGE (c)-[:HAS_PROPERTY]-&gt;(p)<br>MERGE (c)-[:HAS_EMERGENCY_MEASURE]-&gt;(e)<br>MERGE (c)-[:HAS_STORAGE_REQ]-&gt;(s)<br></code></pre></td></tr></table></figure><h4><span id="duo-mo-tai-guan-lian"><strong>多模态关联</strong></span></h4><ul><li><p>使用跨模态嵌入（如CLIP模型）将文本描述与图像关联。</p></li><li><p>分子结构图通过图神经网络（GNN）嵌入为向量，链接到化学品实体。</p></li><li><p>将图像识别结果（如SMILES）与文本抽取的化学品名对齐</p></li></ul><h3><span id="3-zhi-shi-tu-pu-jian-mo-v2"><strong>3. 知识图谱建模v2</strong></span></h3><h4><span id="ben-ti-she-ji-ontology"><strong>本体设计（Ontology）</strong></span></h4><ul><li><p><strong>核心实体</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;化学品核心实体（结构化存储）&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span>                      <span class="hljs-comment"># 唯一ID（CAS或内部ID）</span><br>    name: <span class="hljs-built_in">str</span>                    <span class="hljs-comment"># 中文名称</span><br>    en_name: <span class="hljs-built_in">str</span>                 <span class="hljs-comment"># 英文名称</span><br>    cas: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]           <span class="hljs-comment"># 允许CAS为空</span><br>    un: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>]            <br>    molecular_formula: <span class="hljs-built_in">str</span>       <br>    physical_state: Enum         <br>    aliases: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]           <span class="hljs-comment"># 别名</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;危害类型详情（标准化存储）&quot;&quot;&quot;</span><br>    name: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 危害名称（如&quot;易燃液体&quot;）</span><br>    code: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># GHS代码（如&quot;H225&quot;）</span><br>    severity: <span class="hljs-built_in">int</span>           <span class="hljs-comment"># 危险等级（1-5）</span><br>    icon: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 图标路径</span><br></code></pre></td></tr></table></figure></li><li><p><strong>2. 动态证据链转为三元组：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvidenceTriple</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;多模态证据（动态存储）&quot;&quot;&quot;</span><br>    head: <span class="hljs-built_in">str</span>                   <span class="hljs-comment"># 关联的Chemical/Hazard等实体的ID</span><br>    relation: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># 关系类型（自由定义）</span><br>    tail: <span class="hljs-built_in">str</span>                   <span class="hljs-comment"># 值或目标实体ID</span><br>    modality: <span class="hljs-built_in">str</span>               <span class="hljs-comment"># text/image</span><br>    source: <span class="hljs-built_in">str</span>                 <span class="hljs-comment"># 数据来源（URL/文件名）</span><br>    confidence: <span class="hljs-built_in">float</span>           <span class="hljs-comment"># 置信度（0-1）</span><br>    timestamp: datetime         <span class="hljs-comment"># 记录时间</span><br></code></pre></td></tr></table></figure></li><li><p><strong>3.  关系的标准化设计：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RelationType</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    <span class="hljs-comment"># 对象属性（连接实体）</span><br>    HAS_HAZARD = <span class="hljs-string">&quot;hasHazard&quot;</span>            <span class="hljs-comment"># 化学品→危害</span><br>    HAS_COMPONENT = <span class="hljs-string">&quot;hasComponent&quot;</span>      <span class="hljs-comment"># 化学品→成分</span><br>    <span class="hljs-comment"># 数据属性（连接实体与字面量）</span><br>    HAS_MOLECULAR_WEIGHT = <span class="hljs-string">&quot;molWeight&quot;</span>  <span class="hljs-comment"># 化学品→分子量（浮点数）</span><br></code></pre></td></tr></table></figure></li></ul><h4><span id="guan-xi-fen-lei-ti-xi-she-ji"><strong>关系分类体系设计</strong></span></h4><p>针对化学品安全领域，采用<strong>混合分类法</strong>：结合领域标准（如GHS）与通用语义模型（如Schema.org）。</p><h5><span id="1-ling-yu-zhuan-yong-guan-xi">1. <strong>领域专用关系</strong></span></h5><table><thead><tr><th>关系类型</th><th>语义定义</th><th>示例</th></tr></thead><tbody><tr><td><code>hasHazard</code></td><td>化学品具有的危害类型</td><td>乙醇 <code>hasHazard</code> 易燃液体</td></tr><tr><td><code>hasFirstAid</code></td><td>危害对应的急救措施</td><td>腐蚀性 <code>hasFirstAid</code> 用水冲洗</td></tr><tr><td><code>regulatedUnder</code></td><td>受哪些法规监管</td><td>铅 <code>regulatedUnder</code> OSHA标准</td></tr></tbody></table><h5><span id="2-tong-yong-yu-yi-guan-xi">2. <strong>通用语义关系</strong></span></h5><table><thead><tr><th>关系类型</th><th>语义定义</th><th>示例</th></tr></thead><tbody><tr><td><code>hasPart</code></td><td>组成关系（整体→部分）</td><td>混合物 <code>hasPart</code> 苯</td></tr><tr><td><code>causes</code></td><td>因果链关系</td><td>泄漏 <code>causes</code> 环境污染</td></tr><tr><td><code>sameAs</code></td><td>实体对齐</td><td>CAS#64-17-5 <code>sameAs</code> 乙醇</td></tr></tbody></table><h5><span id="3-duo-mo-tai-guan-lian-guan-xi">3. <strong>多模态关联关系</strong></span></h5><table><thead><tr><th>关系类型</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td><code>depictedBy</code></td><td>实体与图像&#x2F;视频的关联</td><td>乙醇 <code>depictedBy</code> GHS02图标</td></tr><tr><td><code>describedIn</code></td><td>实体与文本片段的关联</td><td>爆炸性 <code>describedIn</code> MSDS第4节</td></tr></tbody></table><h4><span id="hun-he-cun-chu-ce-lue"><strong>混合存储策略</strong></span></h4><h5><span id="1-shu-ju-fen-pei-yuan-ze"><strong>1. 数据分配原则</strong></span></h5><table><thead><tr><th>数据类型</th><th>存储位置</th><th>示例</th></tr></thead><tbody><tr><td><strong>固定业务字段</strong></td><td>类结构（MongoDB&#x2F;Neo4j）</td><td><code>Chemical.physical_state</code></td></tr><tr><td><strong>多模态证据</strong></td><td>三元组（Neo4j）</td><td><code>&lt;乙醇, 标识图案, GHS02火焰图标&gt;</code></td></tr><tr><td><strong>大文件（光谱&#x2F;视频）</strong></td><td>对象存储（MinIO&#x2F;S3）</td><td>光谱图URL存入<code>EvidenceTriple.tail</code></td></tr></tbody></table><h5><span id="2-shu-ju-ku-mo-xing-shi-li"><strong>2. 数据库模型示例</strong></span></h5><p><strong>MongoDB文档（结构化部分）</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CHEM-64-17-5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;乙醇&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64-17-5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;boiling_point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">78.2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;density&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.789</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hazards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;H225&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;易燃液体&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>Neo4j图关系（三元组部分）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cypher">// 创建证据节点<br>CREATE (e:Evidence &#123;<br>  relation: &quot;消防措施&quot;,<br>  tail: &quot;使用干粉灭火器&quot;,<br>  modality: &quot;text&quot;,<br>  source: &quot;MSDS_第5节&quot;<br>&#125;)<br><br>// 关联到化学品<br>MATCH (c:Chemical &#123;id: &quot;CHEM-64-17-5&quot;&#125;), (e:Evidence)<br>MERGE (c)-[:HAS_EVIDENCE]-&gt;(e)<br></code></pre></td></tr></table></figure><h4><span id="guan-jian-gai-zao-dian"><strong>关键改造点</strong></span></h4><h5><span id="1-lei-jie-gou-diao-zheng"><strong>1. 类结构调整</strong></span></h5><ul><li><strong>移除易变字段</strong>：将<code>icon</code>、<code>spectral_data</code>等转为三元组：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 原类结构中的字段删除</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hazard</span>:<br>    <span class="hljs-comment"># 删除 icon: str  </span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Property</span>:<br>    <span class="hljs-comment"># 删除 spectral_data: Dict</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><strong>增加ID引用</strong>：所有类添加唯一ID，用于关联三元组：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chemical</span>:<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">str</span> = Field(default_factory=<span class="hljs-keyword">lambda</span>: <span class="hljs-string">f&quot;CHEM-<span class="hljs-subst">&#123;uuid.uuid4()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h5><span id="2-xin-zeng-ying-she-fu-wu"><strong>2. 新增映射服务</strong></span></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvidenceMapper</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;动态字段与三元组的转换服务&quot;&quot;&quot;</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">map_icon_to_triple</span>(<span class="hljs-params">chemical_id: <span class="hljs-built_in">str</span>, icon_path: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">return</span> EvidenceTriple(<br>            head=chemical_id,<br>            relation=<span class="hljs-string">&quot;标识图案&quot;</span>,<br>            tail=icon_path,<br>            modality=<span class="hljs-string">&quot;image&quot;</span>,<br>            source=<span class="hljs-string">&quot;GHS图标库&quot;</span><br>        )<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">map_spectral_data</span>(<span class="hljs-params">chemical_id: <span class="hljs-built_in">str</span>, spectra_type: <span class="hljs-built_in">str</span>, url: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">return</span> EvidenceTriple(<br>            head=chemical_id,<br>            relation=<span class="hljs-string">f&quot;光谱数据_<span class="hljs-subst">&#123;spectra_type&#125;</span>&quot;</span>,<br>            tail=url,<br>            modality=<span class="hljs-string">&quot;image&quot;</span>,<br>            source=<span class="hljs-string">&quot;实验室检测&quot;</span><br>        )<br></code></pre></td></tr></table></figure><h4><span id="cha-xun-you-hua-fang-an"><strong>查询优化方案</strong></span></h4><h5><span id="1-hun-he-cha-xun-shi-li"><strong>1. 混合查询示例</strong></span></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_chemical_with_evidence</span>(<span class="hljs-params">cas: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-comment"># 1. 从MongoDB获取结构化数据</span><br>    chem = mongo_db.chemicals.find_one(&#123;<span class="hljs-string">&quot;cas&quot;</span>: cas&#125;)<br>    <br>    <span class="hljs-comment"># 2. 从Neo4j获取关联证据</span><br>    evidences = neo4j.run(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        MATCH (c:Chemical &#123;cas: $cas&#125;)-[:HAS_EVIDENCE]-&gt;(e)</span><br><span class="hljs-string">        RETURN e.relation AS relation, e.tail AS value, e.modality AS type</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>, cas=cas)<br>    <br>    <span class="hljs-comment"># 3. 按模态分类证据</span><br>    chem[<span class="hljs-string">&quot;evidences&quot;</span>] = &#123;<br>        <span class="hljs-string">&quot;text&quot;</span>: [e <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> evidences <span class="hljs-keyword">if</span> e[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;text&quot;</span>],<br>        <span class="hljs-string">&quot;image&quot;</span>: [e <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> evidences <span class="hljs-keyword">if</span> e[<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image&quot;</span>]<br>    &#125;<br>    <span class="hljs-keyword">return</span> chem<br></code></pre></td></tr></table></figure><h4><span id="2-huan-cun-ce-lue"><strong>2. 缓存策略</strong></span></h4><ul><li><p><strong>结构化数据</strong>：Redis缓存<code>Chemical</code>对象（TTL 1小时）</p></li><li><p><strong>三元组数据</strong>：按需实时查询（高频关系可预加载）</p></li></ul><h3><span id="4-zhi-shi-chou-qu-yu-rong-he"><strong>4. 知识抽取与融合</strong></span></h3><h4><span id="wen-ben-chu-li"><strong>文本处理</strong></span></h4><ul><li><p><strong>NLP处理流水线</strong>：</p><ul><li><p>命名实体识别（NER）：提取化学品名、属性、危害术语（用BERT-CRF模型）。</p></li><li><p>关系抽取：基于规则或预训练模型（如REBEL）。</p></li></ul></li><li><p><strong>输出</strong>：</p><ul><li>标准化三元组（主体-关系-客体）存入图数据库</li></ul></li></ul><h4><span id="tu-xiang-chu-li"><strong>图像处理</strong></span></h4><ul><li><p><strong>cv处理流水线</strong>：</p><ul><li><p><strong>图标识别</strong>：YOLOv8检测GHS危险图标（如火焰、骷髅头）。</p></li><li><p><strong>分子结构解析</strong>：RDKit+GNN将结构图转为SMILES表达式。</p></li><li><p><strong>光谱匹配</strong>：ResNet提取特征，与数据库光谱向量相似度排序。</p></li></ul></li><li><p><strong>输出</strong>：</p><ul><li>图像特征向量（存入Milvus）、关联的化学品实体。</li></ul></li></ul><h3><span id="5-zhi-shi-cun-chu-yu-tui-li"><strong>5. 知识存储与推理</strong></span></h3><ul><li><p><strong>图数据库</strong>：Neo4j存储实体和关系。</p><ul><li>示例Cypher查询：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cypher">MATCH (c:Chemical &#123;name:&quot;硫酸&quot;&#125;)-[:has_hazard]-&gt;(h)<br>RETURN h.protection_measures<br></code></pre></td></tr></table></figure><ul><li><p><strong>向量数据库</strong>：FAISS存储分子结构、光谱嵌入向量，支持相似性搜索。</p></li><li><p><strong>推理引擎</strong>：</p><ul><li><p>基于规则的推理：IF <code>泄漏浓度 &gt;阈值</code> THEN <code>启动应急流程</code>。</p></li><li><p>图神经网络推理：预测未知化学品的危害性。</p></li></ul></li></ul><h3><span id="6-ying-yong-ceng-shi-xian"><strong>6. 应用层实现</strong></span></h3><ul><li><p><strong>多模态检索</strong>：</p><ul><li><p>输入：上传光谱图 → 返回匹配化学品及安全措施。</p></li><li><p>输入：”哪些化学品与氨气反应？” → 返回反应列表及视频演示。</p></li></ul></li><li><p><strong>风险要素自动抽取</strong>：</p><ul><li><p>输入：图片 + 高温的文字描述</p></li><li><p>输出：爆炸风险：避免热源</p></li></ul></li></ul><h3><span id="7-ji-zhu-zhan"><strong>7. 技术栈</strong></span></h3><table><thead><tr><th>模块</th><th>技术选型</th><th>用途</th></tr></thead><tbody><tr><td><strong>文本处理</strong></td><td>Spacy+BERT-CRF, REBEL关系抽取</td><td>化学品名&#x2F;风险要素抽取</td></tr><tr><td><strong>图像处理</strong></td><td>YOLOv8（图标检测）, RDKit+GNN（分子图转SMILES）, CLIP（跨模态匹配）</td><td>图像解析与关联</td></tr><tr><td><strong>知识存储</strong></td><td>Neo4j（图谱）, FAISS（向量）, MongoDB（非结构化数据）</td><td>多模态数据存储</td></tr><tr><td><strong>后端服务</strong></td><td>FastAPI（Python）, GraphQL（图谱查询）, Kafka（实时数据流）</td><td>提供统一接口</td></tr><tr><td><strong>前端可视化</strong></td><td>React + Cytoscape.js + Ketcher + Three.js（3D分子展示）</td><td>交互式知识探索</td></tr><tr><td><strong>部署运维</strong></td><td>Docker + Kubernetes, Prometheus（监控）, Nginx（负载均衡）</td><td>高可用部署</td></tr></tbody></table><h3><span id="8-tiao-zhan-yu-jie-jue-fang-an"><strong>8. 挑战与解决方案</strong></span></h3><ul><li><p><strong>数据异构性</strong>：定义统一JSON-LD格式映射多模态数据。</p></li><li><p><strong>实时性</strong>：使用Kafka流处理传感器数据。</p></li><li><p><strong>可解释性</strong>：生成基于子图的解释（如泄漏处理步骤的推理路径）。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;1-xu-qiu-fen-xi-yu-chang-jing-ding-yi&quot;&gt;&lt;strong&gt;1. 需求分析与场景定义&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：实现危险化学品的快速识别、属</summary>
      
    
    
    
    <category term="知识图谱" scheme="https://stackecho.blog/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    <category term="项目" scheme="https://stackecho.blog/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
</feed>
